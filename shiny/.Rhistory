MT = as.numeric(treat == "APP"))
rownames(edesign) <- colnames(dt)
design <- make.design.matrix(edesign, degree = 3)
design
?p.vector
fit <- p.vector(dt, design, Q = 0.05, MT.adjust = "BH")
fit$I
fit$i
fit$alfa
fit$alfa
fit$SELEC
str(fit)
?T.step
?T.fit
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05)
str(tstep)
tstep$coefficients
sigs <- get.siggenes(tstep, rsq = 0.6, vars = "groups")
str(sigs)
suma2Venn(sigs$summary[, 2:4])
sigs$summary
suma2Venn(sigs$summary[, 1:2])
str(sigs)
sigs <- get.siggenes(tstep, rsq = 0.6, vars = "each")
sigs$summary
stop("x")
setwd()
0.01 * 584
n <- 100
object.size(n)
object.size(n, units = "auto")
?object.size
format(object.size(n), units = "auto")
format(object.size(n), units = "Gb")
?grep
?read.delim
load("~/Dropbox/ADSP/R/hg19Gene.rdt")
head(hg19Gene)
library(pheatmap)
library(ggplot2)
library(matrixcalc)
rm(list = ls())
load("~/Dropbox/ADSP/R/kinship.rdt")
KS <- kinship$autosome
is.positive.definite(KS)
KS[KS < 0] <- 0
is.positive.definite(KS)
KS <- kinship$autosome
KS[KS < 0] <- 0
is.positive.definite(KS)
KS[1:10, 1:10]
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
kin23 <- kinship$kin23
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
pdf("~/Dropbox/ADSP/kinship/kin-heatmap.pdf")
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
for (i in 1:22) {
KS <- kinship$chr[[i]]
KS[KS < 0] <- 0
judge <- is.positive.definite(KS)
cat(judge, "\n")
}
load("~/Dropbox/ADSP/R/KS_doqtl.rdt")
load("~/Dropbox/ADSP/R/KS_emma.rdt")
compare <- cbind(EMMA = c(kin1), DOQTL = c(kin2), KING = c(kinship$autosome))
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 4, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 4, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 3, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 20)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
?pheatmap
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 2, cellheight = 2, fontsize_number = 6)
# heatmap(cor(kinship23))
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 10, cellheight = 10, fontsize_number = 6)
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 10, cellheight = 10, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 20, cellheight = 20, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 30, cellheight = 30, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pedigree = c(rep("within", 1545), rep("between", 164055))
kin.dt <- data.frame(kinship = c(kin23),
chr = rep(colnames(kin23), each = nrow(kin23)),
pedigree = rep(pedigree, 23))
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf", width = 5)
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(fill = pedigree, alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(aes(fill = pedigree), alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("grey30", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12))
#       legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(color = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank())
dev.off()
library(WGCNA)
install.packages("WGCNA")
library(WGCNA)
install.packages("namespace")
library(WGCNA)
install.packages("impute")
library(WGCNA)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("Biobase", lib.loc="~/Library/R/3.1/library")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach",
title: "myfile"
?seq
setwd("~/Dropbox/GitHub/Testis/")
library(biomaRt)
library(dplyr)
library(ggvis)
select_(iris, ~Petal.Length)
load("data/ge.rdt")
ge_tpm <- sapply(ge, function(x) x$TPM) %>% as.data.frame
rownames(ge_tpm) = ge[[1]]$gene_id
mart <- useMart("ensembl", dataset = "mmusculus_gene_ensembl")
biomart <- getBM(c("ensembl_transcript_id", "ensembl_gene_id", "external_gene_name"),
filters = "ensembl_transcript_id", values = ge[[1]]$gene_id, mart)
biomart <- biomart[match(ge[[1]]$gene_id, biomart$ensembl_transcript_id), ]
ge_tpm <- apply(ge_tpm, 2, function(x) tapply(x, biomart$external_gene_name, sum))
ge_tpm <- ge_tpm[-1, ] %>% as.data.frame
slp1 <- colnames(ge_tpm)
grp1 <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM")
spInf <- data.frame(sample = slp1, grp = factor(gsub("[123]", "", slp1), levels = grp1))
spInf <- mutate(spInf, geno = factor(gsub("^(M|W).*", "\\1", grp), levels = c("W", "M")))
Hspa2 <- spInf %>% mutate(tpm = c(as.matrix(ge_tpm["Hspa2", ])))  # Hspa2 in raw
ggvis(Hspa2, ~as.numeric(grp), ~tpm) %>% layer_boxplots(fill=~grp, width = 0.5) %>% layer_text(text:=~sample)
build <- within(ge_tpm, {
RW1=W1PLM/W1NONP; RW2=W2PLM/W2NONP; RW3=W3PLM/W3NONP; RM1=M1PLM/M1NONP; RM2=M2PLM/M2NONP; RM3=M3PLM/M3NONP
}) %>% select(contains("R"))
head(build)
plot(build["Hspa2", ])
build["Hspa2"]
build["Hspa2", ]
plot(1:6, build["Hspa2", ])
Hspa2_2 <- data.frame(sample = colnames(build)) %>%
mutate(group = factor(gsub("^(M|W).*", "\\1", sample), levels = c("W", "M")))
Hspa2_2
Hspa2_2 <- data.frame(sample = colnames(build)) %>%
mutate(group = factor(gsub("^(M|W).*", "\\1", colnames(build)), levels = c("W", "M")))
Hspa2_2
Hspa2_2 <- data.frame(sample = colnames(build)) %>%
mutate(group = factor(gsub("(M|W).*", "\\1", sample), levels = c("W", "M")))
Hspa2_2
Hspa2_2 <- data.frame(sample = colnames(build)) %>%
mutate(group = factor(gsub(".*(M|W).*", "\\1", sample), levels = c("W", "M")))
Hspa2_2
Hspa2_2 <- data.frame(sample = colnames(build)) %>% mutate(group = factor(gsub(".*(M|W).*", "\\1", sample)))
Hspa2_2
Hspa2_rt <- Hspa2_rt %>% mutate(ratio = c(as.matrix(build["Hspa2", ])))  # Hspa2 in poly/non-poly
Hspa2_rt <- data.frame(sample = colnames(build)) %>% mutate(group = factor(gsub(".*(M|W).*", "\\1", sample)))
Hspa2_rt <- Hspa2_rt %>% mutate(ratio = c(as.matrix(build["Hspa2", ])))  # Hspa2 in poly/non-poly
Hspa2_rt
Hspa2_rt <- data.frame(sample = colnames(build)) %>% mutate(grp = factor(gsub(".*(M|W).*", "\\1", sample)))
Hspa2_rt <- Hspa2_rt %>% mutate(ratio = c(as.matrix(build["Hspa2", ])))  # Hspa2 in poly/non-poly
ggvis(Hspa2_rt, ~as.numeric(sample), ~ratio) %>% layer_boxplots(fill=~grp, width = 0.5) %>% layer_text(text:=~sample)
ggvis(Hspa2_rt, ~as.numeric(grp), ~ratio) %>% layer_boxplots(fill=~grp, width = 0.5) %>% layer_text(text:=~sample)
pairwise.t.test(Hspa2_rt, ratio ~ group)
lm(Hspa2_rt, ratio ~ group)
?lm
lm(ratio ~ group, Hspa2_rt)
lm(ratio ~ grp, Hspa2_rt)
summary(lm(ratio ~ grp, Hspa2_rt))
ggvis(Hspa2_rt, ~as.numeric(grp), ~ratio) %>% layer_boxplots(fill=~grp, width = 0.5) %>% layer_text(text:=~sample)
rm(list = ls())
setwd("~/Dropbox/GitHub/Testis/")
load("data/ge.rdt")
txInf <- ge[[1]] %>% select(gene_id, length)
count <- sapply(ge, function(x) x$expected_count) %>% as.data.frame
rownames(count) <- txInf$gene_id
txEif <- read.delim("shiny/gviz/Eif4g3.txt", header = F, stringsAsFactors = F)
count <- count[txEif$V1, ]
count <- count[apply(count, 1, max) > 20, ]
(txEif <- rownames(count))
dna_mts <- list()
dna_ch3 <- read.fasta(file = "gviz/seqs.fa")
library(Gviz)
library(Pviz)
library(Rsamtools)
library(dplyr)
library(seqinr)
dna_ch3 <- read.fasta(file = "gviz/seqs.fa")
setwd("shiny")
dna_mts$sample1 <- read.fasta(file = "gviz/consensus/M1IN_GES14_04904_TGACCA.fa")
dna_mts$sample2 <- read.fasta(file = "gviz/consensus/M2IN_GES14_04905_ACAGTG.fa")
dna_mts$sample3 <- read.fasta(file = "gviz/consensus/M3IN_GES14_04906_GCCAAT.fa")
dna_diff <- lapply(dna_mts, function(x) {
sapply(txEif, function(i) {
pos = which(dna_ch3[[i]] != x[[i]])
rbind(pos, REF = dna_ch3[[i]][pos], ALT = x[[i]][pos]) %>% as.data.frame
})
})
dna_ch3 <- read.fasta(file = "gviz/seqs.fa")
dna_diff <- lapply(dna_mts, function(x) {
sapply(txEif, function(i) {
pos = which(dna_ch3[[i]] != x[[i]])
rbind(pos, REF = dna_ch3[[i]][pos], ALT = x[[i]][pos]) %>% as.data.frame
})
})
length(dna_diff)
names(dna_diff)
dna_diff$sample1[[1]]
dna_diff$sample1[[3]]
dna_diff$sample2[[3]]
dna_diff$sample3[[3]]
dna_diff$sample1[[4]]
dna_diff$sample2[[4]]
dna_diff$sample3[[4]]
dna_mts <- list()
dna_ch3 <- read.fasta(file = "gviz/seqs.fa")
dna_mts$sample1 <- read.fasta(file = "gviz/consensus/M1IN_GES14_04904_TGACCA.fa")
dna_mts$sample2 <- read.fasta(file = "gviz/consensus/M2IN_GES14_04905_ACAGTG.fa")
dna_mts$sample3 <- read.fasta(file = "gviz/consensus/M3IN_GES14_04906_GCCAAT.fa")
dna_diff <- lapply(dna_mts, function(x) {
sapply(txEif, function(i) {
pos = which(dna_ch3[[i]] != x[[i]])
rbind(pos, REF = dna_ch3[[i]][pos], ALT = x[[i]][pos]) %>% as.data.frame
})
})
dna_diff$sample1[[4]]
dna_diff$sample2[[4]]
dna_diff$sample3[[4]]
count <- count[txEif$V1, ]
txInf <- ge[[1]] %>% select(gene_id, length)
count <- sapply(ge, function(x) x$expected_count) %>% as.data.frame
rownames(count) <- txInf$gene_id
txEif <- read.delim("shiny/gviz/Eif4g3.txt", header = F, stringsAsFactors = F)
count <- count[txEif$V1, ]
load("data/ge.rdt")
setwd("~/Dropbox/GitHub/Testis/")
load("data/ge.rdt")
txInf <- ge[[1]] %>% select(gene_id, length)
count <- sapply(ge, function(x) x$expected_count) %>% as.data.frame
rownames(count) <- txInf$gene_id
txEif <- read.delim("shiny/gviz/Eif4g3.txt", header = F, stringsAsFactors = F)
count <- count[txEif$V1, ]
head(count)
count <- count[apply(count, 1, max) > 20, ]
(txEif <- rownames(count))
setwd("shiny")
dna_diff[[1]]
lapply(dna_diff, function(x) x[[1]])
lapply(dna_diff, function(x) x[[2]])
lapply(dna_diff, function(x) x[[3]])
lapply(dna_diff, function(x) x[[4]])
lapply(dna_diff, function(x) x[[1]])
(txEif <- rownames(count))
lapply(dna_diff, function(x) x[[2]])
shiny::runApp()
getwd()
load("./gvizList.rdt")
load("./geList.rdt")
sample <- names(gvizList$sample)
sample
names(gvizList$sample)
length(gvizList$sample)
name <- list.files(path = "gviz/bam/", pattern = "*ALL.bam$")
lapply(name, function(x) indexBam(paste("gviz/bam", x, sep = "/")))
sample <- lapply(name, function(x) AlignmentsTrack(paste("gviz/bam", x, sep = "/")))
names(sample) <- gsub("_.*", "", name)
seqs <- SequenceTrack("gviz/seqs.fa", name = "C3H")
seqnames(seqs)
name <- list.files(path = "gviz/bam/", pattern = "*ALL.bam$")
lapply(name, function(x) indexBam(paste("gviz/bam", x, sep = "/")))
sample <- lapply(name, function(x) AlignmentsTrack(paste("gviz/bam", x, sep = "/")))
names(sample) <- gsub("_.*", "", name)
seqs <- SequenceTrack("gviz/seqs.fa", name = "C3H")
seqnames(seqs)
names(sample)
gvizList <- list()
gvizList$seqs <- seqs
gvizList$sample <- sample
save(gvizList, file = "gvizList.rdt")
shiny::runApp()
count
setwd("~/Dropbox/GitHub/Testis/")
name <- list.files(path = "gviz/bam/", pattern = "*ALL.bam$")
setwd("shiny")
name <- list.files(path = "gviz/bam/", pattern = "*ALL.bam$")
lapply(name, function(x) indexBam(paste("gviz/bam", x, sep = "/")))
sample <- lapply(name, function(x) AlignmentsTrack(paste("gviz/bam", x, sep = "/")))
names(sample) <- gsub("_.*", "", name)
seqs <- SequenceTrack("gviz/seqs.fa", name = "C3H")
gvizList <- list()
gvizList$seqs <- seqs
gvizList$sample <- sample
save(gvizList, file = "gvizList.rdt")
names(sample)
axis <- GenomeAxisTrack()
plotTracks(list(seqs, axis, sample[[1]]), chromosome = seqnames(seqs)[1], from = 1, to = 2670)
shiny::runApp()
dna_mts <- list()
dna_ch3 <- read.fasta(file = "gviz/seqs.fa")
dna_mts$sample1 <- read.fasta(file = "gviz/consensus/M1IN_GES14_04904_TGACCA.fa")
dna_mts$sample2 <- read.fasta(file = "gviz/consensus/M2IN_GES14_04905_ACAGTG.fa")
dna_mts$sample3 <- read.fasta(file = "gviz/consensus/M3IN_GES14_04906_GCCAAT.fa")
dna_diff <- lapply(dna_mts, function(x) {
sapply(txEif, function(i) {
pos = which(dna_ch3[[i]] != x[[i]])
rbind(pos, REF = dna_ch3[[i]][pos], ALT = x[[i]][pos]) %>% as.data.frame
})
})
lapply(dna_diff, function(x) x[[1]])
lapply(dna_diff, function(x) x[[2]])
lapply(dna_diff, function(x) x[[3]])
lapply(dna_diff, function(x) x[[4]])
lapply(dna_diff, function(x) x[[1]])
dna_mts <- list()
dna_ch3 <- read.fasta(file = "gviz/seqs.fa")
dna_mts$sample1 <- read.fasta(file = "gviz/consensus/M1IN_GES14_04904_TGACCA.fa")
dna_mts$sample2 <- read.fasta(file = "gviz/consensus/M2IN_GES14_04905_ACAGTG.fa")
dna_mts$sample3 <- read.fasta(file = "gviz/consensus/M3IN_GES14_04906_GCCAAT.fa")
dna_diff <- lapply(dna_mts, function(x) {
sapply(txEif, function(i) {
pos = which(dna_ch3[[i]] != x[[i]])
rbind(pos, REF = dna_ch3[[i]][pos], ALT = x[[i]][pos]) %>% as.data.frame
})
})
lapply(dna_diff, function(x) x[[1]])
lapply(dna_diff, function(x) x[[2]])
lapply(dna_diff, function(x) x[[3]])
lapply(dna_diff, function(x) x[[4]])
dna_ch3 <- read.fasta(file = "gviz/seqs.fa")
dna_mts <- read.fasta(file = "gviz/MIN.fa")
str(dna_mts)
str(dna_ch3)
sapply(txEif, function(i) {
pos = which(dna_ch3[[i]] != dna_mts[[i]])
rbind(pos, REF = dna_ch3[[i]][pos], ALT = x[[i]][pos]) %>% as.data.frame
})
dna_diff <- sapply(txEif, function(i) {
pos = which(dna_ch3[[i]] != dna_mts[[i]])
rbind(pos, REF = dna_ch3[[i]][pos], ALT = dna_mts[[i]][pos]) %>% as.data.frame
})
dna_diff
dna_ch3 <- read.fasta(file = "gviz/seqs.fa")
dna_mts <- read.fasta(file = "gviz/MIN.fa")
dna_diff <- sapply(txEif, function(i) {
pos = which(dna_ch3[[i]] != dna_mts[[i]])
rbind(pos, REF = dna_ch3[[i]][pos], ALT = dna_mts[[i]][pos]) %>% as.data.frame
})
pep_ch3 <- getTrans(dna_ch3); names(pep_ch3) <- txEif
pep_ch3
length(pep_ch3)
names(pep_ch3)
pep_mts <- lapply(dna_mts, function(x) {
y = getTrans(x); names(y) = txEif; y
})
names(pep_mts)
str(pep_ch3)
str(pep_mts)
pep_mts[[1]]
pep_ch3[[1]]
dna_mts[[1]]
head(pep_diff[[1]])
names(pep_diff)
pep_diff <- sapply(txEif, function(i) {
pos = which(pep_ch3[[i]] != pep_mts[[i]])
rbind(pos, REF = pep_ch3[[i]][pos], ALT = pep_mts[[i]][pos]) %>% as.data.frame
})
names(pep_diff)
head(pep_diff[[1]])
y = getTrans(dna_mts[[1]])
head(y)
pep_mts <- lapply(dna_mts, function(x) {
y = getTrans(x); names(y) = txEif; y
})
head(pep_mts[[1]])
pep_mts <- getTrans(dna_mts); names(pep_mts) <- txEif
head(pep_mts[[1]])
pep_diff <- sapply(txEif, function(i) {
pos = which(pep_ch3[[i]] != pep_mts[[i]])
rbind(pos, REF = pep_ch3[[i]][pos], ALT = pep_mts[[i]][pos]) %>% as.data.frame
})
head(pep_diff[[1]])
pep_diff
pviz <- ProteinAxisTrack(addNC = TRUE, littleTicks = TRUE)
pviz.axis <- ProteinAxisTrack(addNC = TRUE, littleTicks = TRUE)
pviz.seq1 <- ProteinSequenceTrack(pep_ch3[[1]], name = "CH3")
pviz.seq2 <- ProteinSequenceTrack(pep_mts[[1]], name = "MT")
str(pep_ch3)
plotTracks(trackList = c(pviz.seq1, pviz.seq1, pviz.seq2), from = 1, to = 2047)
plotTracks(trackList = c(pviz.axis, pviz.seq1, pviz.seq2), from = 1, to = 2047)
pep_ch3[[1]]
pep_mts[[1]]
pviz.seq1 <- ProteinSequenceTrack(pep_ch3[[1]], name = "CH3")
pviz.seq2 <- ProteinSequenceTrack(pep_mts[[1]], name = "MT")
plotTracks(trackList = c(pviz.axis, pviz.seq1, pviz.seq2), from = 1, to = 2044)
library(Pviz)
plotTracks(trackList = c(pviz.axis, pviz.seq1, pviz.seq2), from = 1, to = 2044)
