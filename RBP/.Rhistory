venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5,
cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.pos = 0,
cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5,
cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.fontface = "bold", cat.pos = 0,
cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5,
cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.fontface = "bold",
cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
x = "DE4m"
DE.month$x
DE.month$"x"
DE.month$DE4m
DE.month[[x]]
for (month in c("DE4m", "DE5m", "DE6m"))
write.table(rownames(DE.month[[month]]), row.names = FALSE, col.names = FALSE, quote = FALSE,
file = paste(paste("~/Dropbox/AD/DAVID", month, sep = "."), "txt", sep = "."))
for (month in c("DE4m", "DE5m", "DE6m"))
write.table(rownames(DE.month[[month]]), row.names = FALSE, col.names = FALSE, quote = FALSE,
file = paste(paste("~/Dropbox/AD/DAVID", month, sep = "/"), "txt", sep = "."))
rm(list = ls())
library(maSigPro)
load("~/Dropbox/AD/R/batch2014.rdt")
str(dt)
colnames(dt)
data(edesign.abiotic)
edesign.abiotic
treat <- rep("WT", ncol(dt))
treat[grep("APP", colnames(dt))] <- "APP"
month <- rep("4m", ncol(dt))
month[grep("5m", colnames(dt))] <- "5m"
month[grep("6m", colnames(dt))] <- "6m"
treat
month
colnames(dt)
paste(treat, month, sep = "")
uid <- paste(treat, month, sep = "")
uid
as.numeric(uid)
as.integer(uid)
as.factor(uid)
nlevels(as.factor(uid))
month <- rep("2m", ncol(dt))
month[grep("4m", colnames(dt))] <- "5m"
month[grep("5m", colnames(dt))] <- "5m"
month[grep("6m", colnames(dt))] <- "6m"
uid <- paste(treat, month, sep = "")
nlevels(as.factor(uid))
levels(as.factor(uid))
as.numeric(as.factor(uid))
edesign.abiotic
design <- cbind(Time = gsub("m", ",", month),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
design <- cbind(Time = gsub("m", "", month),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
design <- cbind(Time = as.numeric(gsub("m", "", month)),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
rownames(design) <- colnames(dt)
design
data(data.abiotic)
edesign <- cbind(Time = as.numeric(gsub("m", "", month)),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
rownames(edesign) <- colnames(dt)
design <- make.design.matrix(edesign, degree = 3)
design
?p.vector
fit <- p.vector(dt, design, Q = 0.05, MT.adjust = "BH")
fit$I
fit$i
fit$alfa
fit$alfa
fit$SELEC
str(fit)
?T.step
?T.fit
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05)
str(tstep)
tstep$coefficients
sigs <- get.siggenes(tstep, rsq = 0.6, vars = "groups")
str(sigs)
suma2Venn(sigs$summary[, 2:4])
sigs$summary
suma2Venn(sigs$summary[, 1:2])
str(sigs)
sigs <- get.siggenes(tstep, rsq = 0.6, vars = "each")
sigs$summary
stop("x")
setwd()
0.01 * 584
n <- 100
object.size(n)
object.size(n, units = "auto")
?object.size
format(object.size(n), units = "auto")
format(object.size(n), units = "Gb")
?grep
?read.delim
load("~/Dropbox/ADSP/R/hg19Gene.rdt")
head(hg19Gene)
library(pheatmap)
library(ggplot2)
library(matrixcalc)
rm(list = ls())
load("~/Dropbox/ADSP/R/kinship.rdt")
KS <- kinship$autosome
is.positive.definite(KS)
KS[KS < 0] <- 0
is.positive.definite(KS)
KS <- kinship$autosome
KS[KS < 0] <- 0
is.positive.definite(KS)
KS[1:10, 1:10]
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
kin23 <- kinship$kin23
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
pdf("~/Dropbox/ADSP/kinship/kin-heatmap.pdf")
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
for (i in 1:22) {
KS <- kinship$chr[[i]]
KS[KS < 0] <- 0
judge <- is.positive.definite(KS)
cat(judge, "\n")
}
load("~/Dropbox/ADSP/R/KS_doqtl.rdt")
load("~/Dropbox/ADSP/R/KS_emma.rdt")
compare <- cbind(EMMA = c(kin1), DOQTL = c(kin2), KING = c(kinship$autosome))
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 4, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 4, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 3, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 20)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
?pheatmap
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 2, cellheight = 2, fontsize_number = 6)
# heatmap(cor(kinship23))
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 10, cellheight = 10, fontsize_number = 6)
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 10, cellheight = 10, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 20, cellheight = 20, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 30, cellheight = 30, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pedigree = c(rep("within", 1545), rep("between", 164055))
kin.dt <- data.frame(kinship = c(kin23),
chr = rep(colnames(kin23), each = nrow(kin23)),
pedigree = rep(pedigree, 23))
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf", width = 5)
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(fill = pedigree, alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(aes(fill = pedigree), alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("grey30", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12))
#       legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(color = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank())
dev.off()
library(WGCNA)
install.packages("WGCNA")
library(WGCNA)
install.packages("namespace")
library(WGCNA)
install.packages("impute")
library(WGCNA)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("Biobase", lib.loc="~/Library/R/3.1/library")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach",
title: "myfile"
?seq
library(biomaRt)
library(dplyr)
library(ggvis)
library(xlsx)
rm(list = ls())
setwd("~/Dropbox/GitHub/Testis/")
load("data/ge_tpm.rdt")
slp1 <- colnames(ge_tpm)
grp1 <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM")
spInf <- data.frame(sample = slp1, grp = factor(gsub("[123]", "", slp1), levels = grp1))
spInf <- mutate(spInf, geno = factor(gsub("^(M|W).*", "\\1", grp), levels = c("W", "M")))
ggvis1 <- function(x) {
spInf %>% mutate(tpm = c(as.matrix(ge_tpm[x, ]))) %>%
ggvis(~as.numeric(grp), ~tpm) %>% layer_boxplots(fill=~grp, width = 0.5) %>% layer_text(text:=~sample)
}
ggvis1("Hspa2")
tpm <- ge_tpm[apply(ge_tpm[grep("[123]IN", slp1)], 1, function(x) max(x) > 10), ]
norm1 <- within(tpm + 1, {
RW1 = W1PLM/W1NONP; RW2 = W2PLM/W2NONP; RW3 = W3PLM/W3NONP; RM1 = M1PLM/M1NONP; RM2 = M2PLM/M2NONP; RM3 = M3PLM/M3NONP
}) %>% select(contains("R"))
head(nrom1)
head(norm1)
slp2 <- colnames(norm1)
grp2 = factor(gsub(".*(M|W).*", "\\1", slp2), levels = c("W", "M"))
fit <- apply(log2(norm1 + 1), 1, function(x) lm(x ~ grp2))
fit.r2 <- sapply(fit, function (x) summary(x)$r.squared)
fit.fs <- sapply(fit, function (x) summary(x)$fstatistic)
fit.et <- sapply(fit, function (x) summary(x)$coefficients[2, 1])
fit.pv <- apply(fit.fs, 2, function (x) pf(x[1], x[2], x[3], lower.tail = F))
fit.qv <- p.adjust(fit.pv, method = "fdr")
sig_up <- fit[fit.pv < 0.1 & fit.et > 0]
sig_dn <- fit[fit.pv < 0.1 & fit.et < 0]
sig_up <- fit[fit.pv < 0.05 & fit.et > 0]
sig_dn <- fit[fit.pv < 0.05 & fit.et < 0]
names(sig_up)
names(sig_dn)
spInf2 <- data.frame(sample = slp2, grp = grp2)
ggvis2 <- function(x) {
spInf2 %>% mutate(value = c(as.matrix(norm1[x, ]))) %>%
ggvis(~as.numeric(grp), ~value) %>% layer_boxplots(fill=~grp, width = 0.5) %>% layer_text(text:=~sample)
}
ggvis2("Hspa2")
ggvis2("Eif4g3")
names(sig_up)
names("sig_dn")
names(sig_dn)
names(sig_up)
load("../X/summary.rdt")
table %>% filter(query %in% names(sig_up))
table %>% filter(query %in% names(sig_dn))
table %>% filter(query %in% names(sig_dn))
table %>% filter(query %in% names(sig_up))
ggvis1("Eif4g3")
ggvis2("Eif4g3")
library(Pviz)
library(Rsamtools)
library(seqinr)
load("data/ge.rdt")
txInf <- ge[[1]] %>% select(gene_id, length)
count <- sapply(ge, function(x) x$expected_count) %>% as.data.frame
rownames(count) <- txInf$gene_id
txEif <- read.delim("shiny/gviz/Eif4g3.txt", header = F, stringsAsFactors = F)
txEif
count <- count[txEif$V1, ]
count
count[grep("IN", colnames(count))]
count <- count[apply(count, 1, max) > 20, ]
(txEif <- rownames(count))  # Expressed Eif4g3 transcripts
setwd("shiny")  # Eif4g3 DNA sequences
dna.c3 <- read.fasta(file = "gviz/seqs.fa")
dna.mt <- read.fasta(file = "gviz/MIN.fa")
dna.diff <- sapply(txEif, function(i) {
pos = which(dna.c3[[i]] != dna.mt[[i]])
rbind(pos, REF = dna.c3[[i]][pos], ALT = dna.mt[[i]][pos]) %>% as.data.frame
})
dna.diff
load("gvizList.rdt")
axis <- GenomeAxisTrack()
plotTracks(list(seqs, axis, sample[[1]]), chromosome = seqnames(seqs)[1], from = 1, to = 2670)
seqs <- gvizList$seqs
sample <- gvizList$sample
plotTracks(list(seqs, axis, sample[[1]]), chromosome = seqnames(seqs)[1], from = 1, to = 2670)
seqnames(seqs)
axis <- GenomeAxisTrack()
plotTracks(list(seqs, axis, sample[[1]]), chromosome = seqnames(seqs)[1], from = 1, to = 2670)
sample[[1]]
seqnames(seqs)
pep.c3 <- getTrans(dna.c3); names(pep.c3) <- txEif
pep.mt <- getTrans(dna.mt); names(pep.mt) <- txEif
pep.diff <- sapply(txEif, function(i) {
pos = which(pep.c3[[i]] != pep.mt[[i]])
rbind(pos, REF = pep.c3[[i]][pos], ALT = pep.mt[[i]][pos]) %>% as.data.frame
})
str(pep.c3)
str(dna.c3)
pep.diff <- sapply(txEif, function(i) {
pos = which(pep.c3[[i]] != pep.mt[[i]])
rbind(pos, REF = pep.c3[[i]][pos], ALT = pep.mt[[i]][pos]) %>% as.data.frame
})
pep.diff
pviz.axis <- ProteinAxisTrack(addNC = TRUE, littleTicks = TRUE)
pviz.seq1 <- ProteinSequenceTrack(pep.ch3[[1]][1701:1750], name = "CH3")
pviz.seq1 <- ProteinSequenceTrack(pep.c3[[1]][1701:1750], name = "CH3")
pviz.seq2 <- ProteinSequenceTrack(pep.mt[[1]][1701:1750], name = "MT")
plotTracks(trackList = c(pviz.seq1, pviz.seq2), from = 1, to = 53)
plotTracks(trackList = c(pviz.axis, pviz.seq1, pviz.seq2), from = 1, to = 53)
str(pep.ch3)
str(pep.c3)
setwd("../RBP")
load("eif.rdt")
eif_c3 <- lapply(eif_c3, function(x) mutate(x, UID = paste(From, To, Sequence, sep = "_")))
eif_mt <- lapply(eif_mt, function(x) mutate(x, UID = paste(From, To, Sequence, sep = "_")))
for (i in 1:4) {
diff1 <- setdiff(eif_c3[[i]]$UID, eif_mt[[i]]$UID)
diff2 <- setdiff(eif_mt[[i]]$UID, eif_c3[[i]]$UID);
eif_c3[[i]] <- filter(eif_c3[[i]], UID %in% diff1)
eif_mt[[i]] <- filter(eif_mt[[i]], UID %in% diff2)
}
x = eif_c3[[1]]
x
dna.diff
pep.diff
dna.diff
c3_2 <- lapply(eif_c3, function(x) tapply(x$Name, x$UID, function(z) paste(z, collapse = ",")) %>% as.data.frame)
mt_2 <- lapply(eif_mt, function(y) tapply(y$Name, y$UID, function(z) paste(z, collapse = ",")) %>% as.data.frame)
c3_2
c3_2[[1]]
mt_2[[1]]
plotTracks(list(seqs, axis, sample[[1]]), chromosome = seqnames(seqs)[1], from = 1, to = 2670)
seqs <- gvizList$seqs
axis <- GenomeAxisTrack()
seqs <- gvizList$seqs
sample <- gvizList$sample
plotTracks(list(seqs, axis, sample[[1]]), chromosome = seqnames(seqs)[1], from = 1, to = 2670)
library(Gviz)
plotTracks(list(seqs, axis, sample[[1]]), chromosome = seqnames(seqs)[1], from = 1, to = 2670)
x = eif_mt[[1]]
aTrack <- AnnotationTrack(start = x$From, width = x$To - x$From, id = x$Name, name = "foo", featureAnnotation = "id", fontcolor.feature = "red")
plotTracks(aTrack, from = 300, to = 5500)
x = eif_c3[[1]]
y = eif_mt[[1]]
aTrack <- AnnotationTrack(start = x$From, width = x$To - x$From, id = x$Name, name = "C3", featureAnnotation = "id", fontcolor.feature = "red")
plotTracks(aTrack, from = 300, to = 5500)
aTrack <- AnnotationTrack(start = y$From, width = y$To - y$From, id = y$Name, name = "C3", featureAnnotation = "id", fontcolor.feature = "red")
plotTracks(aTrack, from = 300, to = 5500)
aTrack <- AnnotationTrack(start = y$From, width = y$To - y$From, id = y$Name, name = "MT", featureAnnotation = "id", fontcolor.feature = "red")
plotTracks(aTrack, from = 300, to = 5500)
summary(fit[[1]])
summary(fit[["Hspa2"]])
ggvis1("Tekt1")
ggvis1("Ccnt1")
dna.diff[[1]]
dna.c3[[1]]
dna.c3[[1]][5190:5200]
x = eif_c3[[4]]
y = eif_mt[[4]]
aTrack <- AnnotationTrack(start = x$From, width = x$To - x$From, id = x$Name, name = "C3", featureAnnotation = "id", fontcolor.feature = "red")
plotTracks(aTrack, from = 300, to = 5500)
aTrack <- AnnotationTrack(start = y$From, width = y$To - y$From, id = y$Name, name = "MT", featureAnnotation = "id", fontcolor.feature = "red")
plotTracks(aTrack, from = 300, to = 5500)
names(eif_c3)
c3_2[[4]]
mt_2[[4]]
names(mt_2)
head(tpm)
tpm_poly <- tpm %>% select(contains("PLM"))
head(tpm_poly)
slp3 <- colnames(tpm_poly)
grp3 = factor(gsub(".*(M|W).*", "\\1", slp3), levels = c("W", "M"))
grp3
spInf3 <- data.frame(sample = slp3, grp = grp3)
fit <- apply(log2(tpm_poly + 1), 1, function(x) lm(x ~ grp3))
grp3
tpm_poly[1, ]
str(norm1)
str(tpm_poly)
lm(log2(tpm_poly + 1)[1, ] ~ grp3)
grp3 = factor(gsub(".*(M|W).*", "\\1", colnames(tpm_poly)), levels = c("W", "M"))
fit <- apply(as.matrix(log2(tpm_poly + 1)), 1, function(x) lm(x ~ grp3))
grp3
colnames(tpm_poly)
grp3 = factor(gsub("(M|W).*", "\\1", colnames(tpm_poly)), levels = c("W", "M"))
grp3
fit <- apply(log2(tpm_poly + 1), 1, function(x) lm(x ~ grp3))
fit.r2 <- sapply(fit, function (x) summary(x)$r.squared)
fit.fs <- sapply(fit, function (x) summary(x)$fstatistic)
fit.et <- sapply(fit, function (x) summary(x)$coefficients[2, 1])
fit.pv <- apply(fit.fs, 2, function (x) pf(x[1], x[2], x[3], lower.tail = F))
fit.qv <- p.adjust(fit.pv, method = "fdr")
sig_up <- fit[fit.pv < 0.05 & fit.et > 0]
sig_dn <- fit[fit.pv < 0.05 & fit.et < 0]
names(sig_up)
sig_up <- fit[fit.qv < 0.05 & fit.et > 0]
sig_dn <- fit[fit.qv < 0.05 & fit.et < 0]
sig_up <- fit[fit.pv < 0.05 & fit.et > 0]
sig_dn <- fit[fit.pv < 0.05 & fit.et < 0]
source("../X/function.R")
source("../../X/function.R")
up_gk <- myGK(names(sig_up))
dn_gk <- myGK(names(sig_dn))
up_gk$KEGG
up_gk$KEGG[, 7:8]
up_gk$KEGG[, 7:8]
dn_gk$KEGG[, 7:8]
dn_gk$KEGG[, 7:8]
shiny::runApp('~/Dropbox/GitHub/Testis/shiny')
shiny::runApp('~/Dropbox/GitHub/Testis/shiny')
shiny::runApp('~/Dropbox/GitHub/Adsp/Shiny/beta')
