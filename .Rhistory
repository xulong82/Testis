?read.delim
load("~/Dropbox/ADSP/R/hg19Gene.rdt")
head(hg19Gene)
library(pheatmap)
library(ggplot2)
library(matrixcalc)
rm(list = ls())
load("~/Dropbox/ADSP/R/kinship.rdt")
KS <- kinship$autosome
is.positive.definite(KS)
KS[KS < 0] <- 0
is.positive.definite(KS)
KS <- kinship$autosome
KS[KS < 0] <- 0
is.positive.definite(KS)
KS[1:10, 1:10]
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
kin23 <- kinship$kin23
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
pdf("~/Dropbox/ADSP/kinship/kin-heatmap.pdf")
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
for (i in 1:22) {
KS <- kinship$chr[[i]]
KS[KS < 0] <- 0
judge <- is.positive.definite(KS)
cat(judge, "\n")
}
load("~/Dropbox/ADSP/R/KS_doqtl.rdt")
load("~/Dropbox/ADSP/R/KS_emma.rdt")
compare <- cbind(EMMA = c(kin1), DOQTL = c(kin2), KING = c(kinship$autosome))
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 4, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 4, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 3, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 20)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
?pheatmap
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 2, cellheight = 2, fontsize_number = 6)
# heatmap(cor(kinship23))
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 10, cellheight = 10, fontsize_number = 6)
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 10, cellheight = 10, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 20, cellheight = 20, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 30, cellheight = 30, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pedigree = c(rep("within", 1545), rep("between", 164055))
kin.dt <- data.frame(kinship = c(kin23),
chr = rep(colnames(kin23), each = nrow(kin23)),
pedigree = rep(pedigree, 23))
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf", width = 5)
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(fill = pedigree, alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(aes(fill = pedigree), alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("grey30", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12))
#       legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(color = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank())
dev.off()
library(WGCNA)
install.packages("WGCNA")
library(WGCNA)
install.packages("namespace")
library(WGCNA)
install.packages("impute")
library(WGCNA)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("Biobase", lib.loc="~/Library/R/3.1/library")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach",
title: "myfile"
?seq
install.packages("ggvis")
library(ggvis)
trim <- read.delim("data/trim.txt", header = F, stringsAsFactors = F)
rsem <- read.delim("data/rsem_c3h.txt", header = F, stringsAsFactors = F)
setwd("~/Dropbox/GitHub/Testis/")
trim <- read.delim("data/trim.txt", header = F, stringsAsFactors = F)
rsem <- read.delim("data/rsem_c3h.txt", header = F, stringsAsFactors = F)
qc <- full_join(trim, rsem, by = "V1")[, -3]
colnames(qc) <- c("Sample", "Trim", "Counts", "Bowtie")
cond <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM")
qc$Sample <- gsub("_.*", "", qc$Sample)
qc$Group <- gsub("[123]", "", qc$Sample) %>% factor(levels = cond)
qc$Genotype <- gsub("^(M|W).*", "\\1", qc$Sample) %>% factor(levels = c("W", "M"))
qc$Counts <- qc$Counts * 1e-6
qc$Trim <- as.numeric(gsub("%", "", qc$Trim)) * 1e-2
qc$Bowtie<- as.numeric(gsub("%", "", qc$Bowtie)) * 1e-2
qc$Align <- qc$Counts * qc$Bowtie
qc %>% ggvis(~Group, ~Trim) %>% scale_numeric("y", domain=c(0.5, 1)) %>%
layer_boxplots(fill=~Group, width = 0.3, scale = "xcenter") %>% layer_text(text:=~Sample)
packages <- c("ape", "amap", "ggdendro", "tidyr","dplyr","Gviz", "ggvis")
sapply(packages, require, character.only = T)
qc <- full_join(trim, rsem, by = "V1")[, -3]
colnames(qc) <- c("Sample", "Trim", "Counts", "Bowtie")
cond <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM")
qc$Sample <- gsub("_.*", "", qc$Sample)
qc$Group <- gsub("[123]", "", qc$Sample) %>% factor(levels = cond)
qc$Genotype <- gsub("^(M|W).*", "\\1", qc$Sample) %>% factor(levels = c("W", "M"))
qc$Counts <- qc$Counts * 1e-6
qc$Trim <- as.numeric(gsub("%", "", qc$Trim)) * 1e-2
qc$Bowtie<- as.numeric(gsub("%", "", qc$Bowtie)) * 1e-2
qc$Align <- qc$Counts * qc$Bowtie
qc %>% ggvis(~Group, ~Trim) %>% scale_numeric("y", domain=c(0.5, 1)) %>%
layer_boxplots(fill=~Group, width = 0.3, scale = "xcenter") %>% layer_text(text:=~Sample)
qc %>% ggvis(~Group, ~Align) %>% scale_numeric("y", domain=c(15, 35)) %>%
layer_boxplots(fill=~Group, width = 0.3) %>% layer_text(text:=~Sample)
qc %>% ggvis(~as.numeric(Group), ~Align) %>% scale_numeric("y", domain=c(15, 35)) %>%
layer_boxplots(fill=~Group, width = 0.3) %>% layer_text(text:=~Sample)
mtc <- mtcars
mtc$cyl <- factor(mtc$cyl)
mtc %>% ggvis(~cyl, ~mpg) %>% layer_boxplots()
# Set the width of the boxes to half the space between tick marks
mtc %>% ggvis(~cyl, ~mpg) %>% layer_boxplots(width = 0.5)
qc %>% ggvis(~as.numeric(Group), ~Align) %>% scale_numeric("y", domain=c(15, 35)) %>%
add_axis("x", values = 1:6) %>%
layer_boxplots(fill=~Group, width = 0.3) %>% layer_text(text:=~Sample)
qc %>% ggvis(~as.numeric(Group), ~Align) %>% scale_numeric("y", domain=c(15, 35)) %>%
add_axis("x", values = cond) %>%
layer_boxplots(fill=~Group, width = 0.3) %>% layer_text(text:=~Sample)
qc %>% ggvis(~as.numeric(Group), ~Align) %>% scale_numeric("y", domain=c(15, 35)) %>%
add_axis("x", values = NULL) %>%
layer_boxplots(fill=~Group, width = 0.3) %>% layer_text(text:=~Sample)
qc %>% ggvis(~as.numeric(Group), ~Align) %>% scale_numeric("y", domain=c(15, 35)) %>%
add_axis("x", values = 1:6, title = "Group") %>%
layer_boxplots(fill=~Group, width = 0.3) %>% layer_text(text:=~Sample)
qc %>% ggvis(~as.numeric(Group), ~Align) %>% scale_numeric("y", domain=c(15, 35)) %>%
add_axis("x", values = 1:6, title = "Group") %>%
layer_boxplots(fill=~Group, width = 0.3) %>% layer_text(text:=~Sample, color = "red")
qc %>% ggvis(~as.numeric(Group), ~Align) %>% scale_numeric("y", domain=c(15, 35)) %>%
add_axis("x", values = 1:6, title = "Group") %>%
layer_boxplots(fill=~Group, width = 0.3) %>% layer_text(text:=~Sample, stroke = "red")
qc %>% ggvis(~as.numeric(Group), ~Align) %>% scale_numeric("y", domain=c(15, 35)) %>%
add_axis("x", values = 1:6, title = "Group") %>%
layer_boxplots(fill=~Group, width = 0.3) %>% layer_text(text:=~Sample, stroke := "red")
txInf %>% filter(symbol == "Eif4g3")
load("data/ge.rdt"); load("../X/ensembl_mus.rdt")
txInf <- ge[[1]] %>% select(gene_id, length) %>% mutate(symbol = ens.map[gene_id, 2])
txInf %>% filter(symbol == "Eif4g3")
ensId <- txInf %>% filter(symbol == "Eif4g3") %>% select(gene_id)
ensId
head(genes)
head(data)
ge_count <- sapply(ge, function(x) x$expected_count) %>% as.data.frame
data <- ge_count
head(data)
rownames(ge_count) <- rownames(ge_TPM) <- txInf$gene_id
ge_TPM <- sapply(ge, function(x) x$TPM) %>% as.data.frame
rownames(ge_count) <- rownames(ge_TPM) <- txInf$gene_id
data <- ge_count
eif4g3 = genes[ensId$gene_id, ]
genes <- data[! grepl("ERCC", rownames(data)), ]
eif4g3 = genes[ensId$gene_id, ]
eif4g3
qc$eif4g3 <- colSums(eif4g3)[qc$Sample]
qc %>% ggvis(~Group, ~eif4g3) %>%
layer_boxplots(fill=~Group) %>% layer_text(text:=~Sample)
qc %>% ggvis(~as.numeric(Group), ~Align) %>% scale_numeric("y", domain=c(15, 35)) %>%
add_axis("x", values = NULL, title = "Group") %>%
layer_boxplots(fill=~Group, width = 0.3) %>% layer_text(text:=~Sample)
rm(list = ls())
setwd("~/Dropbox/GitHub/Testis/")
packages <- c("ape", "amap", "ggdendro", "tidyr","dplyr","Gviz", "ggvis")
sapply(packages, require, character.only = T)
trim <- read.delim("data/trim.txt", header = F, stringsAsFactors = F)
rsem <- read.delim("data/rsem_c3h.txt", header = F, stringsAsFactors = F)
qc <- full_join(trim, rsem, by = "V1")[, -3]
colnames(qc) <- c("sample", "trim", "counts", "bowtie")
colnames(qc) <- c("sample", "trim", "count", "bowtie")
group <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM")
qc$sample <- gsub("_.*", "", qc$sample)
qc$group <- gsub("[123]", "", qc$sample) %>% factor(levels = group)
qc$genotype <- gsub("^(M|W).*", "\\1", qc$sample) %>% factor(levels = c("W", "M"))
qc
qc$Counts <- qc$Counts * 1e-6
qc$count <- qc$count * 1e-6
qc$trim <- as.numeric(gsub("%", "", qc$trim)) * 1e-2
qc$bowtie<- as.numeric(gsub("%", "", qc$bowtie)) * 1e-2
qc$aligned <- qc$counts * qc$bowtie
qc$aligned <- qc$count * qc$bowtie
qc
ggvis_box <- function(x) {add_axis("x", values = NULL, title = "Group") %>%
layer_boxplots(fill=~Group, width = 0.3) %>% layer_text(text:=~Sample)}
qc %>% ggvis(~Group, ~Trim) %>% scale_numeric("y", domain=c(0.5, 1)) %>% ggvis_box()
qc %>% ggvis(~group, ~trim) %>% scale_numeric("y", domain=c(0.5, 1)) %>% ggvis_box()
ggvis_box <- function(x) {x %>% add_axis("x", values = NULL, title = "Group") %>%
layer_boxplots(fill=~group, width = 0.3) %>% layer_text(text:=~sample)}
qc %>% ggvis(~group, ~trim) %>% scale_numeric("y", domain=c(0.5, 1)) %>% ggvis_box()
qc %>% ggvis(~as.numeric(group), ~trim) %>% scale_numeric("y", domain=c(0.5, 1)) %>% ggvis_boxplots()
ggvis_boxplots <- function(x) {x %>% add_axis("x", values = NULL, title = "Group") %>%
layer_boxplots(fill=~group, width = 0.3) %>% layer_text(text:=~sample)}
qc %>% ggvis(~as.numeric(group), ~trim) %>% scale_numeric("y", domain=c(0.5, 1)) %>% ggvis_boxplots()
qc$group1 <- as.numeric(group)
qc$group1 <- as.numeric(qc$group)
qc %>% ggvis(~group1, ~Bowtie) %>% scale_numeric("y", domain=c(0.5, 1)) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~bowtie) %>% scale_numeric("y", domain=c(0.5, 1)) %>% ggvis_boxplots()
qc %>% ggvis(~count, ~bowtie) %>% layer_points(size:=1e2, fill=~group) %>% layer_text(text:=~sample)
qc %>% ggvis(~group1, ~count) %>% scale_numeric("y", domain=c(25, 45)) %>% ggvis_boxplots()
load("data/ge.rdt"); load("../X/ensembl_mus.rdt")
txInf <- ge[[1]] %>% select(gene_id, length) %>% mutate(symbol = ens.map[gene_id, 2])
ge_TPM <- sapply(ge, function(x) x$TPM) %>% as.data.frame
ge_count <- sapply(ge, function(x) x$expected_count) %>% as.data.frame
rownames(ge_count) <- rownames(ge_TPM) <- txInf$gene_id
data <- ge_count
colSums(data)
qc$aligned2 = colSums(data)[qc$sample]
cor(qc$aligned, aligned2)
cor(qc$aligned, qc$aligned2)
qc$aligned2 = NULL
qc
qc$f_count <- qc$count / qc$count[1]
qc$f_aligned <- qc$aligned / qc$aligned[1]
cor(qc$f_count, qc$f_aligned)
qc
genes <- data[! grepl("ERCC", rownames(data)), ]
spike <- data[grep("ERCC", rownames(data)), ]
head(data)
data <- ge_count; data <- data[, qc$sample]
head(data)
genes <- data[! grepl("ERCC", rownames(data)), ]
spike <- data[grep("ERCC", rownames(data)), ]
colSums(spike) / colSums(spike)[1]
qc$sample
qc$spike1 <- colSums(spike) / colSums(spike)[1]
mol <- read.delim("data/cms_095046.txt", stringsAsFactors = F)
mol <- mol[match(rownames(spike), mol$ERCC.ID), 4] * 0.02
par(mfrow = c(3, 6))
for (i in 1:ncol(spike)) plot(log2(mol), log2(spike[, i]), ylim = c(2, 14), main = colnames(spike)[i])
names(spike)
head(spike)
sf <- c(W1NONP = 1, apply(spike[, -1], 2, function(x) summary(lm(x ~ -1 + spike[, 1]))$coefficients[1, 1]))
sf
qc$spike2 <- c(W1NONP = 1, apply(spike[, -1], 2, function(x) summary(lm(x ~ -1 + spike[, 1]))$coefficients[1, 1]))
cor(qc$spike1, qc$spike2)
qc %>% ggvis(~group, ~spike2) %>% scale_numeric("y", domain=c(.5, 1.5)) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~spike2) %>% scale_numeric("y", domain=c(.5, 1.5)) %>% ggvis_boxplots()
qc
qc %>% ggvis(~group1, ~spike2) %>% scale_numeric("y", domain=c(.5, 2.0)) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~spike1) %>% scale_numeric("y", domain=c(.5, 2.0)) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~count) %>% scale_numeric("y", domain=c(25, 45)) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~aligned) %>% scale_numeric("y", domain=c(15, 35)) %>% ggvis_boxplots()
apply(spike, 2, function(x) lm(log2(x) ~ log2(mol))$coefficient)
head(apply)
head(spike)
lapply(spike, 2, function(x) lm(log2(x) ~ log2(mol))$coefficient)
pval <- apply(spike[, 2:18], 2, function(x) summary(lm(x ~ -1 + spike[, 1]))$coefficients[1, 4])
pval
hc1 <- hcluster(t(genes), method = "pearson", link = "average") %>% as.phylo
plot(hc1, edge.width=2, font=2, cex=0.7, label.offset=1e-3, direction="downward")
par(mfrows = c(1, 1)); plot(hc1, edge.width=2, font=2, cex=0.7, label.offset=1e-3, direction="downward")
par(mfrow = c(1, 1)); plot(hc1, edge.width=2, font=2, cex=0.7, label.offset=1e-3, direction="downward")
qc$f_spike1 <- colSums(spike) / colSums(spike)[1]
qc$f_spike2 <- c(W1NONP = 1, apply(spike[, -1], 2, function(x) summary(lm(x ~ -1 + spike[, 1]))$coefficients[1, 1]))
qc$spike1 = qc$spike2 = NULL
qc
ensId <- txInf %>% filter(symbol == "Hspa2") %>% select(gene_id)
ensId
ensId <- txInf %>% filter(symbol == "Eif4g3") %>% select(gene_id)
ensId
ensId <- txInf %>% filter(symbol == "Hspa2") %>% select(gene_id)
qc$hspa2 <- genes[ensId$gene_id, ]
genes[ensId$gene_id, ]
qc %>% mutate(hspa2 = genes[ensId$gene_id, ])
qc
qc %>% mutate(hspa2 = t(genes[ensId$gene_id, ]))
qc %>% mutate(hspa2 <- t(genes[ensId$gene_id, ]))
qc %>% mutate(hspa2 = t(genes[ensId$gene_id, 1]))
qc %>% mutate(hspa2 = as.matrix(genes[ensId$gene_id, ]))
qc %>% mutate(hspa2 = t(genes[ensId$gene_id, ]))
qc$hspa2 <- genes[ensId$gene_id, ]
qc$hspa2 <- t(genes[ensId$gene_id, ])
qc
t(genes[ensId$gene_id, ])
t(genes[ensId$gene_id, ]) %>% names
t(genes[ensId$gene_id, ]) %>% colnames
t(genes[ensId$gene_id, ]) %>% colnames = NULL
t(genes[ensId$gene_id, ]) %>% c
genes[ensId$gene_id, ] %>% c
c(genes[ensId$gene_id, ]) %>% c
qc %>% mutate(hspa2 = t(genes[ensId$gene_id, ]) %>% c)
qc %>% mutate(hspa2 = c(t(genes[ensId$gene_id, ]))
)
ensId <- txInf %>% filter(symbol == "Hspa2") %>% select(gene_id)
qc %>% mutate(hspa2 = c(t(genes[ensId$gene_id, ]))
qc %>% mutate(hspa2 = c(t(genes[ensId$gene_id, ])))
qc
c(t(genes[ensId$gene_id, ]))
ensId$gene_id
?mutate
qc$hspa2 = c(t(genes[ensId$gene_id, ])))
qc$hspa2 = c(t(genes[ensId$gene_id, ]))
qc
qc %>% ggvis(~group1, ~hspa2) %>% ggvis_boxplots()
qc %>% mutate(hspa2_f_count = hspa2 / f_count)
qc <- mutate(qc, hspa2_f_count = hspa2 / f_count, hspa2_f_aligned = hspa2 / f_aligned,
hspa2_f_spike1 = hspa2 / f_spike1, hspa2_f_spike2 = hspa2 / f_spike2)
qc
qc %>% ggvis(~group1, ~hspa2_f_aligned) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~hspa2_f_spike1) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~hspa2_f_spike2) %>% ggvis_boxplots()
ensId <- txInf %>% filter(symbol == "Actb") %>% select(gene_id)
ensId
genes[ensId, ]
genes[ensId$gene_id, ]
colSums(genes[ensId$gene_id, ])
qc$sample
ensId <- txInf %>% filter(symbol == "Actb") %>% select(gene_id)
qc$actb <- colSums(genes[ensId$gene_id, ])
qc
qc %>% ggvis(~group1, ~actb) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~hspa2) %>% ggvis_boxplots()
qc <- mutate(qc, actb_f_count = actb / f_count, actb_f_aligned = actb / f_aligned,
actb_f_spike1 = actb / f_spike1, actb_f_spike2 = actb / f_spike2)
qc
qc %>% ggvis(~group1, ~actb) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~actb_f_spike1) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~actb_f_count) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~actb_f_aligned) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~actb_f_count) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~actb) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~actb_f_count) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~actb_f_aligned) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~actb_f_spike1) %>% ggvis_boxplots()
spike2 <- t(apply(spike, 1, "/", qc$f_count))
head(spike2)
head(spike)
genes2 <- t(apply(genes, 1, "/", qc$f_count))
qc$f_spike3 <- c(W1NONP = 1, apply(spike2[, -1], 2, function(x) summary(lm(x ~ -1 + spike2[, 1]))$coefficients[1, 1]))
qc$f_spike3
ensId <- txInf %>% filter(symbol == "Actb") %>% select(gene_id)
qc$actb <- colSums(genes2[ensId$gene_id, ])
qc$actb <- colSums(genes[ensId$gene_id, ])
qc$actb2 <- colSums(genes2[ensId$gene_id, ])
qc <- mutate(qc, actb2_f_spike3 = actb2 / f_spike3)
qc
summary(sort(apply(genes, 2, sum)))
summary(sort(apply(genes2, 2, sum)))
qc %>% ggvis(~group1, ~actb2) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~actb2_f_spike3) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~actb_f_spike1) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~spike1) %>% scale_numeric("y", domain=c(.5, 2.0)) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~f_spike1) %>% scale_numeric("y", domain=c(.5, 2.0)) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~f_spike2) %>% scale_numeric("y", domain=c(.5, 2.0)) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~f_spike3) %>% scale_numeric("y", domain=c(.5, 2.0)) %>% ggvis_boxplots()
rm(list = ls())
setwd("~/Dropbox/GitHub/Testis/")
trim <- read.delim("data/trim.txt", header = F, stringsAsFactors = F)
rsem <- read.delim("data/rsem_c3h.txt", header = F, stringsAsFactors = F)
trim
rsem
qc <- full_join(trim, rsem, by = "V1")[, -3]
qc
colnames(qc) <- c("sample", "trim", "count", "bowtie")
group <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM")
qc$sample <- gsub("_.*", "", qc$sample)
qc$group <- gsub("[123]", "", qc$sample) %>% factor(levels = group)
qc$genotype <- gsub("^(M|W).*", "\\1", qc$sample) %>% factor(levels = c("W", "M"))
qc$count <- qc$count * 1e-6
qc$trim <- as.numeric(gsub("%", "", qc$trim)) * 1e-2
qc$bowtie<- as.numeric(gsub("%", "", qc$bowtie)) * 1e-2
qc$aligned <- qc$count * qc$bowtie
qc$group1 <- as.numeric(qc$group)
ggvis_boxplots <- function(x) {x %>% add_axis("x", values = NULL, title = "Group") %>%
layer_boxplots(fill=~group, width = 0.3) %>% layer_text(text:=~sample)}
qc %>% ggvis(~group1, ~trim) %>% scale_numeric("y", domain=c(0.5, 1)) %>% ggvis_boxplots()
summary(qc$trim)
qc %>% ggvis(~group1, ~count) %>% scale_numeric("y", domain=c(25, 45)) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~bowtie) %>% scale_numeric("y", domain=c(0.5, 1)) %>% ggvis_boxplots()
qc %>% ggvis(~count, ~bowtie) %>% layer_points(size:=1e2, fill=~group) %>% layer_text(text:=~sample)
qc %>% ggvis(~count, ~bowtie) %>% layer_points(size:=1e2, fill=~group) %>% layer_text(text:=~sample)
load("data/ge.rdt"); load("../X/ensembl_mus.rdt")
txInf <- ge[[1]] %>% select(gene_id, length) %>% mutate(symbol = ens.map[gene_id, 2])
ge_TPM <- sapply(ge, function(x) x$TPM) %>% as.data.frame
ge_count <- sapply(ge, function(x) x$expected_count) %>% as.data.frame
rownames(ge_count) <- rownames(ge_TPM) <- txInf$gene_id
data <- ge_count; data <- data[, qc$sample]
genes <- data[! grepl("ERCC", rownames(data)), ]
spike <- data[grep("ERCC", rownames(data)), ]
qc
qc$f_count <- qc$count / qc$count[1]
qc$f_aligned <- qc$aligned / qc$aligned[1]
qc$f_spike1 <- colSums(spike) / colSums(spike)[1]
qc$f_spike2 <- c(W1NONP = 1, apply(spike[, -1], 2, function(x) summary(lm(x ~ -1 + spike[, 1]))$coefficients[1, 1]))
qc %>% ggvis(~group1, ~f_spike1) %>% scale_numeric("y", domain=c(.5, 2.0)) %>% ggvis_boxplots()
qc
qc %>% ggvis(~f_count, ~f_spike2) %>% layer_points()
qc %>% ggvis(~f_count, ~f_spike2) %>% layer_points()  %>% layer_text(text:=~sample)}
qc %>% ggvis(~f_count, ~f_spike2) %>% layer_points()  %>% layer_text(text:=~sample)
qc %>% ggvis(~f_count, ~f_spike2) %>% layer_points(fill=~group)  %>% layer_text(text:=~sample)
qc %>% ggvis(~group1, ~f_spike2) %>% scale_numeric("y", domain=c(.5, 2.0)) %>% ggvis_boxplots()
