axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12))
#       legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(color = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank())
dev.off()
library(WGCNA)
install.packages("WGCNA")
library(WGCNA)
install.packages("namespace")
library(WGCNA)
install.packages("impute")
library(WGCNA)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("Biobase", lib.loc="~/Library/R/3.1/library")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach",
title: "myfile"
?seq
132 + 95 + 276 + 113
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
log10(0.05)
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
library(QTLRel)
?scanOe
?scanOne
library(tissuesGeneExpression)
data("tissuesGeneExpression")
library(genefilter)
y = e[,which(tissue=="endometrium")]
head(y)
var = apply(y, 1, var)
qqnorm(var)
lines(1, 1)
abline(0, 1)
qqnorm(sqrt(var))
library(limma)
?fitFDist
fitFDist(apply(y, 1, var), 14)
ps <- (seq(along=s2)-0.5)/length(s2)
s2 <- rowVars(y)
ps <- (seq(along=s2)-0.5)/length(s2)
ps
summary(ps)
estiamte=fitFDist(apply(y, 1, var), 14)
estimate$scale
x=fitFDist(apply(y, 1, var), 14)
x$scale
?qf
estimates = x
ps <- (seq(along=s2)-0.5)/length(s2)
theoretical<- qf(ps,14,estimates$df2)*estimates$scale
theoretical
hist(theoretical)
summary(ps)
seq(along = 5)
seq(along = 1:5)
qqplot(sqrt( theoretical ), sqrt( s2 ),ylim=LIM,xlim=LIM)
qqplot(sqrt( theoretical ), sqrt( s2 ))
?fitFDist
0.45 * 0.55
0.45 * 0.55 / 20
0.45 * 0.55 * 20
sqrt(0.45 * 0.55 * 20)
sqrt(0.45 * 0.55 * 20) / 20
library(Biobase)
library(SpikeInSubset)
data(rma95)
y <- exprs(rma95)
pData(rma95)
g <- factor(rep(0:1,each=3))
spike <- rownames(y) %in% colnames(pData(rma95))
spike
library(genefilter)
x = rowttests(y, g)
?rowttests
str(x)
head(x)
sig = x$p.value < 0.01
table(sig)
1 - sum(spike & sig ) / sum(sig)
head(y)
?rowVar
rowvar
?rowVars
sds = rowSds(y[, 1:3])
sds
spike
sig
group = spike
group[sig] = true_pos
x = rep("T_POS", length(spike))
x
x[(! sig) & spike] = "F_NEG"
x[(! sig) & (! spike)] = "T_NEG"
x[(sig) & (! spike)] = "F_POS"
x
boxplot(x)
?boxplot
table(x)
boxplot(sds, x)
boxplot(sds ~ x)
boxplot(split(sds, x))
library(limma)
fit <- lmFit(y, design=model.matrix(~ g))
colnames(coef(fit))
fit[[1]]
length(fit)
coef(fit)
head(coef(fit))
sampleSD = fit$sigma
posteriorSD = sqrt(fit$s2.post)
sampleSD = fit$sigma
posteriorSD = sqrt(fit$s2.post)
fit <- eBayes(fit)
posteriorSD = sqrt(fit$s2.post)
plot(sampleSD, posteriorSD)
abline(0, 1)
mean(sampleSD)
pvals = fit$p.value[,2]
length(pvals)
length(spike)
1 - sum(pvals < 0.01 & spike) / sum(spike)
sum(pvals < 0.01 & spike) / sum(pvals < 0.01)
library(limma)
fit = lmFit(y, design=model.matrix(~ g))
fit = eBayes(fit)
##second coefficient relates to diffences between group
pvals = fit$p.value[,2]
1 - sum(pvals < 0.01 & spike) / sum(spike)
pvals
pvals < 0.01
table(pvals < 0.01)
names(fit)
head(fit$p.value)
pvals = fit$p.value[, 2]
table(pvals < 0.01)
table(spikes)
table(spike)
rowttest(y)
rowttests(y)
y = rowttests(y)
head(y)
table(y[, 3] < 0.01)
y = rowttests(y, g)
g
y <- exprs(rma95)
z = rowttests(y, g)
table(z[, 3] < 0.01)
pvals
all(rownames(pvals) == names(spike))
sum((! pvals < 0.01) & spike)/ sum(pvals < 0.01)
sum((pvals < 0.01) & (! spike))/ sum(pvals < 0.01)
5.3 * 52
?pt
?qr
head(y)
y1 = y[1, ]
y1
g
lm(y1 ~ g)
summary(lm(y1 ~ g))
g
-0.0744 / 0.10605
?mrlm
?rlm
library(MASS)
?rlm
head(y)
rowVars(y)
vars = rowVars(y)
hist(vars)
hist(sqrt(vars))
?seq
seq(0, 1, by = 0.01)
p = seq(0, 1, by = 0.01)
6 * p * (1 - p)
sum(6 * p * (1 - p))
pi = 6 * p * (1 - p)
plot(p, pi)
mean(pi)
head(y)
dim(y)
x = rowVars(y[, 1:3])
x
n = length(x)
n
?pmax
pmax(x)
min(5:1)
pmin(5:1)
pmin(5:1, pi)
pmax(x, 0)
k = rnorm(10)
k
pmax(k, 0)
log(x)
digamma(11/2)
?digamma
log(11/2)
z <- log(x)
e <- z-digamma(df1/2)+log(df1/2)
df1 = 11
e <- z-digamma(df1/2)+log(df1/2)
emean <- mean(e)
evar <- sum((e-emean)^2)/(n-1)
evar <- evar - mean(trigamma(df1/2))
evar
df2 <- 2*trigammaInverse(evar)
s20 <- exp(emean+digamma(df2/2)-log(df2/2))
df2
s20
fitFDist(x, 11)
?sampling
library(rstan)
?sampling
log10
install.packages("ExomeDepth")
library(ExomeDepth)
data(exons.hg19)
head(exons.hg19)
data(ExomeCount)
ExomeCount
colnames(ExomeCount)
ExomeCount.dafr <- as(ExomeCount[, colnames(ExomeCount)], "data.frame")
head(ExomeCount.dafr)
ExomeCount.dafr$chromosome <- gsub(as.character(ExomeCount.dafr$space), "chr", "")
ExomeCount.dafr$chromosome <- gsub(as.character(ExomeCount.dafr$space), pattern = "chr", replacement = "")
head(ExomeCount.dafr)
99e-2
source("http://bioconductor.org/biocLite.R")
biocLite("DNAcopy")
library(DNAcopy)
data(coriell)
CNA.object <- CNA(cbind(coriell$Coriell.05296), coriell$Chromosome,coriell$Position, data.type="logratio", sampleid="c05296")
head(CNA.object)
head(cbind(coriell$Coriell.05296))
coriell$Chromosome
coriell$Position
head(coriell)
smoothed.CNA.object <- smooth.CNA(CNA.object)
segment.smoothed.CNA.object <- segment(smoothed.CNA.object, verbose=1)
plot(segment.smoothed.CNA.object, plot.type="w")
plot(segment.smoothed.CNA.object, plot.type="s")
sdundo.CNA.object <- segment(smoothed.CNA.object, undo.splits="sdundo", undo.SD=3,verbose=1)
plot(sdundo.CNA.object,plot.type="s")
library(dplyr)
library(ggplot2)
rm(list = ls())
setwd("~/Dropbox/GitHub/Lupus")
immgen <- read.csv("Immgen/RequestedImmGenData2015-08-11_13-20-24.csv.gz", header = T)  # 214 samples
head(immgen)
str(immgen)
immgen <- read.table("Immgen/RequestedImmGenData2015-08-11_13-20-24.csv.gz", check.names = F)
immgen <- read.table("Immgen/RequestedImmGenData2015-08-11_13-20-24.csv.gz", header = T, check.names = F)
immgen <- read.table("Immgen/RequestedImmGenData2015-08-11_13-20-24.csv.gz", header = T, check.names = F)
immgen <- read.csv("Immgen/RequestedImmGenData2015-08-11_13-20-24.csv.gz", header = T, check.names = F)
str(immgen)
immgen <- read.csv("Immgen/RequestedImmGenData2015-08-11_13-20-24.csv.gz", header = T, check.names = F)
str(immgen)
immgen <- read.csv("Immgen/RequestedImmGenData2015-08-11_13-20-24.csv.gz", header = T, check.names = F)
str(immgen)
names(immgen)
type <- gsub("_.*", names(immgen))
(type <- gsub("_.*", "", names(immgen)))
(tissue <- gsub(".*_", "", names(immgen)))
head(immgen$GeneSymbol)
file <- "Immgen/RequestedImmGenData2015-08-11_13-20-24.csv.gz"
rm(list = ls())
setwd("~/Dropbox/GitHub/Lupus")
file <- "Immgen/RequestedImmGenData2015-08-11_13-20-24.csv.gz"
immgen <- read.csv(file, stringsAsFactors = F, header = T, check.names = F)
head(immgen$Description)
duplicated(immgen$GeneSymbol)
table(duplicated(immgen$GeneSymbol))
names(immgen)
x = tapply(immgen[4:227], immgen$GeneSymbol, max)
x = apply(immgen[4:227], 2, function(x) tapply(x, immgen$GeneSymbol, max))
head(x)
immgen = x
names(immgen)
immgen = as.data.frame(immgen)
(type <- gsub("_.*", "", names(immgen)))
(tissue <- gsub(".*_", "", names(immgen)))
hist(immgen[, 1])
immgen <- log2(immgen + 1)
hist(immgen[, 1])
rm(list = ls())
setwd("~/Dropbox/GitHub/Lupus")
file <- "Immgen/RequestedImmGenData2015-08-11_13-20-24.csv.gz"
immgen <- read.csv(file, stringsAsFactors = F, header = T, check.names = F)
immgen <- apply(immgen[4:227], 2, function(x) tapply(x, immgen$GeneSymbol, max))
immgen <- log2(immgen + 1) %>% as.data.frame
hist(immgen[, 1])
save(immgen, file = "./Immgen/immgenNew.rdt")
library(dplyr)
library(genomation)
library(GenomicFeatures)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(VariantAnnotation)
library(ggplot2)
rm(list = ls())
setwd("~/Dropbox/GitHub/ATAC/")
rm(list = ls())
setwd("~/Dropbox/GitHub/ATAC/")
dir()
load("atac_gwas.rdt")
names(atac_gwas)
atac_gwas$atac_gwas_gr
(files = list.files("broadPeak/"))
peaks = lapply(files, function(x) readBroadPeak(paste0("broadPeak/", x)))
names(peaks) = gsub("_S[1-9]_.*", "", files)
sapply(peaks, length)
gene.parts = readTranscriptFeatures("bed/hg19_refseq_ucsc.bed")
x = peaks[[1]]
summary(mcols(x)$score)  # is filter required?
names(gene.parts)
annotateWithFeature(target = x, feature = gene.parts$exons)
score_matrix <- ScoreMatrix(target = x, windows = gene.parts$promoters)
heatMatrix(score_matrix, xcoords = c(-1000, 1000))
score_matrix
score_matrix <- ScoreMatrixBin(target = x, windows = promoters, bin.num = 50)
plotMeta(score_matrix, xcoords = c(-1000, 1000))
score_matrix <- ScoreMatrix(target = x, windows = gene.parts$promoters)
plotMeta(score_matrix, xcoords = c(-1000, 1000))
plotMeta(score_matrix, xcoords = c(-1000, 1000))
?ScoreMatrix
?heatMatrix
heatMatrix(score_matrix)
pdf("pdf/score_matrix.pdf", width = 10, height = 6)
heatMatrix(score_matrix)
dev.off()
annot.list = annotateWithGeneParts(GRangesList(peaks), gene.parts)
plotGeneAnnotation(annot.list, cluster = TRUE)
annot.list[[1]]@ perc.of.OlapFeat
annot.list
names(gene.parts)
head(gene.parts$promoters)
head(gene.parts$exons)
head(x)
y = subsetByOverlaps(gene.parts$exons, x)
head(y)
head(gene.parts$exons)
gene.parts$exons$score
table(gene.parts$exons$score)
names(gene.parts)
names(peaks)
head(gene.parts$promters)
head(gene.parts$promoters)
head(gene.parts$TSSes)
gene.parts$promoters
gene.parts$TSSes
gene.parts$exons
gene.parts$introns
atac_exons_gr <- lapply(peaks, function(x) subsetByOverlaps(gene.parts$exons, x))
head(atac_exon_gr[[1]])
head(atac_exons_gr[[1]])
atac_exons_genes <- lapply(atac_exons_gr, function(x) unique(x$name))
atac_exons_genes[[1]]
atac_exons_genes[[1]] %>% length
y = gene.parts$exons$name %>% unique
length(y)
ensembl = useMart("ensembl",dataset = "hsapiens_gene_ensembl")
library(biomaRt)
ensembl = useMart("ensembl",dataset = "hsapiens_gene_ensembl")
listAttributes(ensembl)
grep("NCBI", listAttributes(ensembl))
head(listAttributes(ensembl))
grep("NCBI", listAttributes(ensembl)$description)
grep("Ensembl", listAttributes(ensembl)$description)
grep("Entrez", listAttributes(ensembl)$description)
listAttributes(ensembl)[59:60, ]
gene = atac_exons_genes[[1]]
getBM("external_gene_name", "entrezgene", gene, ensembl)
gene
listAttributes(ensembl)[59:60, ]
grep("RefSeq", listAttributes(ensembl)$description)
listAttributes(ensembl)[82:87, ]
y = getBM("external_gene_name", "refseq_mrna", gene, ensembl)
head(gene.parts$promoters)
head(gene.parts$TSSes)
y
head(y)
y$external_gene_name %>% unique
length(y)
length(gene)
head(gene.parts$TSSes)
Iranges(gene.parts$TSSes)
ranges(gene.parts$TSSes)
ranges(gene.parts$TSSes)$start
start(gene.parts$TSSes)
end(gene.parts$TSSes)
head(gene.parts$TSSes)
promoters = gene.parts$TSSes
promoters
start(promoters) = start(promoters) - 1e3
end(promoters) = end(promoters) + 1e3
promoters
atac_promoters_gr <- lapply(peaks, function(x) subsetByOverlaps(promoters, x))
atac_promoters_genes <- lapply(atac_promoters_gr, function(x) unique(x$name))
gene = atac_promoters_genes[[1]]
head(y)
refseq = atac_promoters_genes[[1]]
symbol = getBM("external_gene_name", "refseq_mrna", refseq, ensembl)
symbol
symbol = symbol$external_gene_name %>% unique
symbol
gene.parts
gene.parts$exons
table(gene.parts$exons$score)
library(xlsx)
library(dplyr)
rm(list = ls())
setwd("~/Dropbox/GitHub/Testis/")
load("data/dataList.rdt")
for(obj in names(dataList)) assign(obj, dataList[[obj]])
?read.xlsx
file "Chromatoid/Meikar_Supp_Tables_revised_XL.xlsx"
file <- "Chromatoid/Meikar_Supp_Tables_revised_XL.xlsx"
cb_rna <- read.xlsx(file, sheetName = "Table S5", startRow = 3, stringsAsFactors = F)
head(cb_rna)
str(cb_rna)
y = as.numeric(cb_rna$FPKM)
head(y)
tail(y)
tail(y, n = 20)
tail(y, n = 100)
tail(y, n = 200)
cb_rna <- read.xlsx(file, sheetName = "Table S5", startRow = 3, endRow = 4979, stringsAsFactors = F)
str(cb_rna)
y = as.numeric(cb_rna$FPKM)
tail(y, n = 100)
summary(y)
cb_rna$FPKM <- as.numeric(cb_rna$FPKM)
cb_protein <- read.xlsx(file, sheetName = "Table S1", startRow = 3, stringsAsFactors = F)
head(cb_protein)
head(cb_rna)
cb_rna_symbol <- cb_rna$symbol
tail(cb_rna_symbol)
cb_protein_symbol <- cb_protein$Gene.Symbol
cb_protein_symbol
tail(cb_protein)
tail(cb_rna)
cb_protein <- read.xlsx(file, sheetName = "Table S1", startRow = 3, endRow = 91, stringsAsFactors = F)
tail(cb_rna)
tail(cb_protein)
cb_protein_symbol <- cb_protein$Gene.Symbol
cb_protein_symbol
x <- cb_protein$Gene.Symbol
x <- gsub(" ", "", x)
x
x <- gsub(",", ";", x)
x
y = x[87]
?strsplit
strsplit(y, split = ";")
unlist(strsplit(y, split = ";"))
lapply(x, function(idx) strsplit(idx, split = ";"))
lapply(x, function(idx) unlist(strsplit(idx, split = ";")))
lapply(x, function(idx) unlist(strsplit(idx, split = ";"))) %>% unlist
y
y %>% gsub(";", ",")
y %>% gsub(";", "xx")
cb_protein_symbol <- gsub(",", ";", gsub(" ", "", cb_protein$Gene.Symbol))
cb_protein_symbol <- lapply(x, function(idx) unlist(strsplit(idx, split = ";")))
cb_protein_symbol
cb_protein_symbol <- unique(unlist(cb_protein_symbol))
cb_protein_symbol
head(nonp)
(cb_protein_nonp <- intersect(rownames(nonp), cb_protein_symbol))
(cb_rna_nonp <- intersect(rownames(nonp), cb_rna_symbol))
write.xlsx(cb_protein_nonp, file = "Chromatoid/intersect.xlsx", sheetName = "CB_Protein_NONP", append = T)
write.xlsx(cb_rna_nonp, file = "Chromatoid/intersect.xlsx", sheetName = "CB_RNA_NONP", append = T)
