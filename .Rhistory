}
head(z)
150 * 500
151 * 501
z = matrix(z, ncol = 501)
a = seq(-5, 10, 0.1)
b = seq(-10, 40, 0.1)
filled.contour(a, b, z)
sum(z)
max(z)
x = c(-0.86, -0.30, -0.05, 0.73)
n = c(5, 5, 5, 5)
y = c(0, 1, 3, 5)
a0 = seq(-5, 10, 0.1)
b0 = seq(-10, 40, 0.1)
post <- function (a,b,y,n,x) prod((invlogit(a+b*x))^y*(1-invlogit(a+b*x))^(n-y))
triangle.prior <- function(x) {
if (x >= 0 && x < 0.25)
8 * x
else if (x >= 0.25 && x <= 1)
8/3 - 8 * x/3
else 0
}
plot(seq(-1, 1, 0.01), triangle.prior(seq(-1, 1, 0.01)))
seq(-1, 1, 0.01)
triangle.prior(seq(-1, 1, 0.01))
y = sapply(x, triangle.prior)
x
y
x = seq(-1, 1, 0.01)
y = sapply(x, triangle.prior)
x
y
plot(x, y)
x = seq(-1, 2, 0.01)
y = sapply(x, triangle.prior)
plot(x, y)
posterior.function <- function(theta, n, y) {
(theta^y) * (1 - theta)^(n - y) * triangle.prior(theta)
}
m <- 100
grid.points <- seq(from = 0, to = 1, length.out = m)
grid.point
grid.points
unnormal.post.ord <- posterior.function(theta = grid.points, n = 500, y = 285)
unnormal.post.ord
k <- 1/m
normal.constant <- sum(k * unnormal.post.ord)
normal.constant
post.ord <- unnormal.post.ord/normal.constant
post.ord
plot(grid.points, post.ord)
plot(grid.points, post.ord, type = "l", col = "red")
?sample
posterior.triangle.1 <- sample(grid.points, size = 10000, replace = T, prob = post.ord)
hist(posterior.triangle.1)
hist(posterior.triangle.1, xlim = c(0, 1))
hist(posterior.triangle.1, xlim = c(0, 1))
posterior.triangle.1
poisson.posterior <- function(theta, y, x, prior.mean.a, prior.var.a, prior.mean.b, prior.var.b) {
a <- theta[1]
b <- theta[2]
lambda <- exp(a + b * x)
log.like <- sum(dpois(y, lambda = lambda, log = T))
log.prior.a <- dnorm(a, mean = prior.mean.a, sd = sqrt(prior.var.a), log = T)
log.prior.b <- dnorm(b, mean = prior.mean.b, sd = sqrt(prior.var.b), log = T)
log.post <- log.like + log.prior.a + log.prior.b
return(exp(log.post))
}
library(Zelig)
install.packages("Zelig")
library(Zelig)
data(sanction)
sanction
head(sanction)
plot(sanction$coop, sanction$num)
y.vec <- sanction$num
x.vec <- sanction$coop
y.vec
x.vec
mu.a <- mu.b <- 0
sigma2.a <- sigma2.b <- 20
mle <- glm(num ~ coop, data = sanction, family = poisson)$coef
mle
?glm
mle.se <- summary(glm(num ~ coop, data = sanction, family = poisson))$coef[, 2]
mle.se
grid.a <- seq(from = mle[1] - 5 * mle.se[1], to = mle[1] + 5 * mle.se[1], length.out = 200)
grid.b <- seq(from = mle[2] - 5 * mle.se[2], to = mle[2] + 5 * mle.se[2], length.out = 200)
grid.a
grid.b
grid.points <- expand.grid(grid.a, grid.b)
head(grid.points)
head(grid.a)
head(grid.b)
post.ord <- apply(grid.points, MARGIN = 1, FUN = poisson.posterior,
y = y.vec, x = x.vec, prior.mean.a = mu.a, prior.var.a = sigma2.a,
prior.mean.b = mu.b, prior.var.b = sigma2.b)
str(post.ord)
sample.indices <- sample(1:nrow(grid.points), size = 10000, replace = T, prob = post.ord)
sim.posterior <- grid.points[sample.indices, ]
dim(sim.posterior)
log_post <- function (a,b,y,n,x) sum (dbinom (y, n, invlogit(a+b*x), log.p=TRUE))
x = c(-0.86, -0.30, -0.05, 0.73)
n = c(5, 5, 5, 5)
y = c(0, 1, 3, 5)
a0 = seq(-5, 10, 0.1)
b0 = seq(-10, 40, 0.1)
a = a0[1]
b = b0[1]
dbinom (y, n, invlogit(a+b*x), log.p=TRUE)
invlogit(a+b*x)
?dbinom
sum(invlogit(a+b*x))
dbinom(y, n, invlogit(a+b*x))
dbinom(y[1], n[1], invlogit(a+b*x[1]))
dbinom(y[1], n[1], invlogit(a+b*x[1]), log.p = T)
log_post <- function (a,b,y,n,x) sum (dbinom (y, n, invlogit(a+b*x), log=TRUE))
log_post <- function (a,b,y,n,x) sum (dbinom (y, n, invlogit(a+b*x), log=TRUE))
dbinom (y, n, invlogit(a+b*x), log=TRUE)
grid.points <- expand.grid(a0, b0)
post.ord <- apply(grid.points, MARGIN = 1, FUN = log_post, y = y, n = n, x = x)
head(grid.points)
log_post <- function (a,b,y,n,x) exp^(sum (dbinom (y, n, invlogit(a+b*x), log=TRUE)))
post.ord <- apply(grid.points, MARGIN = 1, function(grid) log_post(grid[1], grid[2], y = y, n = n, x = x)
)
log_post <- function (a,b,y,n,x) exp^(sum (dbinom (y, n, invlogit(a+b*x), log=TRUE)))
post.ord <- apply(grid.points, 1, function(grid) log_post(grid[1], grid[2], y = y, n = n, x = x))
head(grid.points)
post.ord <- apply(grid.points, 1, function(t) log_post(a = t[1], b = t[2], y = y, n = n, x = x))
log_post <- function (a,b,y,n,x) {
loglik = sum (dbinom (y, n, invlogit(a+b*x), log=TRUE))
return(exp^(loglik))
}
log_post <- function (a,b,y,n,x) {
loglik = sum (dbinom (y, n, invlogit(a+b*x), log=TRUE))
return(exp(loglik))
}
post.ord <- apply(grid.points, 1, function(t) log_post(a = t[1], b = t[2], y = y, n = n, x = x))
post.ord
filled.contour(grid.points, post.ord)
filled.contour(grid.points, z = post.ord)
filled.contour(x = grid.points[, 1], y = grid.points[, 2], z = post.ord)
head(grid.points)
tail(grid.points)
filled.contour(x = grid.points$Var1, y = grid.points$Var2, z = post.ord)
?filled.contour
hist(post.ord)
sample.indices <- sample(1:nrow(grid.points), size = 10000, replace = T, prob = post.ord)
sim.posterior <- grid.points[sample.indices, ]
hist(sim.posterior[, 1])
hist(sim.posterior[, 2])
contour(x = grid.points$Var1, y = grid.points$Var2, z = post.ord)
grid.points$Var1
image.maker <- function(coords, value){
N <- length(unique(coords[,1]))
image.out <- matrix(NA, nrow = N, ncol = N)
coords[,1] <- as.numeric(factor(coords[,1]))
coords[,2] <- as.numeric(factor(coords[,2]))
for (i in 1:nrow(coords))
image.out[coords[i,1], coords[i,2]] <- value[i]
return(image.out)
}
image.maker(grid.points, post.ord)
for (t1 in a0) {
for (t2 in b0) {
log_post(a = t1, b = t2, y = y, n = n, x = x)
}
}
post.ord <- NULL
for (t1 in a0) {
for (t2 in b0) {
post0 = log_post(a = t1, b = t2, y = y, n = n, x = x)
post.ord = c(post.ord, post0)
}
}
post.ord <- NULL
for (t1 in a0) {
for (t2 in b0) {
post0 = log_post(a = t1, b = t2, y = y, n = n, x = x)
post.ord = rbind(post.ord, c(t1, t2, post0))
}
}
dim(post.ord)
sample.indices <- sample(1:nrow(post.ord), size = 10000, replace = T, prob = post.ord[, 3])
head(sample.indices)
sim.posterior <- post.ord[sample.indices, ]
hist(sim.posterior[, 1])
hist(sim.posterior[, 2])
contour(post.ord)
head(post.ord)
head(post.ord)
contour(x = post.ord[, 1], y = post.ord[, 2], z = post.ord[, 3])
library(dplyr)
library(biomaRt)
library(quantro)
library(preprocessCore)
library(xlsx)
library(genefilter)
library(Biobase)
library(matrixStats)
library(limma)
rm(list = ls())
setwd("~/Dropbox/GitHub/Testis/")
load("data/dataList.rdt")
for(obj in names(dataList)) assign(obj, dataList[[obj]])
head(tpm)
data <- tpm[! grepl("ERCC", rownames(tpm)), ]
gene <- data[biomart$ensembl_transcript_id, ]
gene <- apply(gene, 2, function(x) tapply(x, biomart$external_gene_name, sum))
head(gene)
nrow(gene)
gene <- gene[! rowMaxs(gene) > 1e4, ]  # removal: tpm
gene <- sweep(gene, 2, colSums(gene), "/") * 1e6 # tpm
gene_nonp <- as.data.frame(gene) %>% dplyr::select(contains("NONP"))  # Non-poly
gene_nonp <- gene_nonp[rowMax(as.matrix(gene_nonp)) > 20, ] # tpm
group <- factor(gsub("(M|W).*", "\\1", colnames(gene_nonp)), levels = c("W", "M"))
gene_nonp$W <- rowMeans(gene_nonp[grep("^W", names(gene_nonp))])
gene_nonp$M <- rowMeans(gene_nonp[grep("^M", names(gene_nonp))])
gene_nonp$log2fold <- with(gene_nonp, log2(M + 1) - log2(W + 1))
(design <- model.matrix(~ group))
v <- voom(gene_nonp[1:6], design, plot = T)
lmFit <- lmFit(v, design)
ebayesFit <- eBayes(lmFit)
(top <- topTable(ebayesFit,coef=ncol(design), n = 20))
qvalue <- qvalue(ebayesFit$p.value[, "groupM"])$qvalues
library(qvalue)
qvalue <- qvalue(ebayesFit$p.value[, "groupM"])$qvalues
which(qvalue < 0.05)
gene_ebayes <- which(ebayesFit$p.value[, "groupM"] < 0.05 & lmFit$coefficients[, "groupM"] > 0.2)
ebayes_id <- names(gene_ebayes)
gene_ebayes <- which(qvalue < 0.05 & lmFit$coefficients[, "groupM"] > 0.2)
ebayes_id <- names(gene_ebayes)
gene_ebayes <- which(ebayesFit$p.value[, "groupM"] < 0.05 & lmFit$coefficients[, "groupM"] > 0.2)
head(IN)
head(nonp_up)
names(gene)
colnames(gene)
gene_IN <- as.data.frame(gene) %>% dplyr::select(contains("IN"))  # IN-only
gene_IN <- gene_IN[rowMax(as.matrix(gene_IN)) > 20, ] # tpm
group <- factor(gsub("(M|W).*", "\\1", colnames(gene_IN)), levels = c("W", "M"))
group
gene_nonp[1:6]
head(gene_nonp)
(design <- model.matrix(~ group))
v <- voom(gene_IN[1:6], design, plot = T)
v
lmFit <- lmFit(v, design)
ebayesFit <- eBayes(lmFit)
gene_ebayes <- which(ebayesFit$p.value[, "groupM"] < 0.05 & lmFit$coefficients[, "groupM"] > 0.2)
ebayes_id <- names(gene_ebayes)
ebayes_id
2^0.2
intersect(rownames(nonp_up), ebayes_id)
gene_ebayes <- which(ebayesFit$p.value[, "groupM"] < 0.05 & lmFit$coefficients[, "groupM"] > 0)
ebayes_id <- names(gene_ebayes)
gene_ebayes <- which(ebayesFit$p.value[, "groupM"] < 0.05)
ebayes_id <- names(gene_ebayes)
ebayes_id
gene_ebayes <- which(ebayesFit$p.value[, "groupM"] < 0.05  & lmFit$coefficients[, "groupM"] > 0)
gene_ebayes <- which(ebayesFit$p.value[, "groupM"] < 0.05 & lmFit$coefficients[, "groupM"] > 0.2)
a = rownames(nonp_up)
ebayes_id <- names(gene_ebayes)
b = ebayes_id
a
b
setdiff(a, b)
setdiff(a, b)
rm(list = ls())
library(xlsx)
library(dplyr)
library(contrast)
library(quantro)
library(Biobase)
library(biomaRt)
library(RColorBrewer)
rm(list = ls())
setwd("~/Dropbox/GitHub/Testis")
load("data/dataList.rdt")
for(obj in names(dataList)) assign(obj, dataList[[obj]])
gene <- tpm[biomart$ensembl_transcript_id, ]
gene <- apply(gene, 2, function(x) tapply(x, biomart$external_gene_name, sum))
dim(gene)
gene <- gene[! rowMax(gene) > 1e4, ]  # outlier
gene <- sweep(gene, 2, colSums(gene), "/") * 1e6
geneAll <- rownames(gene)
gene <- gene[rowMax(gene) > 20, ]
dim(gene)
grp1 <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM")
gene <- gene[, order(factor(gsub("[123]", "", colnames(gene)), levels = grp1))]
grp2 <- factor(gsub("[123]", "", colnames(gene)), levels = grp1)
(geno <- factor(gsub("[123].*", "", colnames(gene)), levels = c("W", "M")))
(frac <- factor(gsub(".*[123]", "", colnames(gene)), levels = c("IN", "PLM", "NONP")))
fit <- apply(log2(gene + 1), 1, function (x) lm(x ~ frac + geno + frac * geno))
(hspa2 = log2(gene["Hspa2", ] + 1))
(hspa2 = sapply(grp1, function(x) mean(hspa2[grp2 == x])))
(coefs = summary(fit[["Hspa2"]])$coefficients[, "Estimate"])
cols <- brewer.pal(6,"Dark2")
plot(1:6, hspa2, xaxt="n", pch=17, cex=2, xlim=c(0, 7), ylim=c(-1, 12), xlab="")
axis(1, at=1:6, labels=names(hspa2))
abline(h=0)
arrows(1, 0, 1, coefs[1], lwd=3, col=cols[1]) # WIN as baseline
abline(h=coefs[1], col=cols[1])
arrows(2, coefs[1], 2, coefs[1]+coefs[4], lwd=3, col=cols[4]) # MIN - WIN
arrows(3, coefs[1], 3, coefs[1]+coefs[3], lwd=3, col=cols[3]) # WNONP - WIN
segments(3, coefs[1]+coefs[3], 4,coefs[1]+coefs[3], col=cols[3]) #
arrows(4, coefs[1]+coefs[3], 4, coefs[1]+coefs[3]+coefs[4], lwd=3, col=cols[4])
arrows(4, coefs[1]+coefs[3]+coefs[4], 4, coefs[1]+coefs[3]+coefs[4]+coefs[6], lwd=3, col=cols[6])
arrows(5, coefs[1], 5, coefs[1]+coefs[2], lwd=3, col=cols[2]) # WNONP - WIN
segments(5, coefs[1]+coefs[2], 6,coefs[1]+coefs[2], col=cols[2]) #
arrows(6, coefs[1]+coefs[2], 6, coefs[1]+coefs[2]+coefs[4], lwd=3, col=cols[4])
arrows(6, coefs[1]+coefs[2]+coefs[4], 6, coefs[1]+coefs[2]+coefs[4]+coefs[5], lwd=3, col=cols[5])
legend("bottomright", names(coefs), fill=cols, cex = 0.75 ,bg="white")
fit.e = t(sapply(fit, function(x) summary(x)$coefficients[-1, "Estimate"]))
fit.p = t(sapply(fit, function(x) summary(x)$coefficients[-1, "Pr(>|t|)"]))
(poly = names(fit)[fit.p[, "fracPLM:genoM"] < 0.05])
nonp
(nonp = names(fit)[fit.p[, "fracNONP:genoM"] < 0.05])
a = names(fit)[fit.e[, "fracNONP:genoM"] > 0]
a
intersect(nonp, a)
contrast = t(sapply(fit, function(x) contrast(x, list(frac = "NONP", geno = "M"), list(frac = "NONP", geno = "W"))[c("Contrast", "Pvalue")]))
(non_poly_explicit <- rownames(contrast)[contrast[, "Pvalue"] < 0.05])
intersect(nonp, non_poly_explicit)
intersect(intersect(nonp, non_poly_explicit), names(fit)[fit.e[, "fracNONP:genoM"] > 0])
intersect(intersect(nonp, non_poly_explicit), names(fit)[fit.e[, "fracNONP:genoM"] > 0])
(hspa2 = log2(gene["Hspa2", ] + 1))
(hspa2 = sapply(grp1, function(x) mean(hspa2[grp2 == x])))
(coefs = summary(fit[["Hspa2"]])$coefficients[, "Estimate"])
cols <- brewer.pal(6,"Dark2")
plot(1:6, hspa2, xaxt="n", pch=17, cex=2, xlim=c(0, 7), ylim=c(-1, 12), xlab="")
axis(1, at=1:6, labels=names(hspa2))
abline(h=0)
arrows(1, 0, 1, coefs[1], lwd=3, col=cols[1]) # WIN as baseline
abline(h=coefs[1], col=cols[1])
arrows(2, coefs[1], 2, coefs[1]+coefs[4], lwd=3, col=cols[4]) # MIN - WIN
arrows(3, coefs[1], 3, coefs[1]+coefs[3], lwd=3, col=cols[3]) # WNONP - WIN
segments(3, coefs[1]+coefs[3], 4,coefs[1]+coefs[3], col=cols[3]) #
arrows(4, coefs[1]+coefs[3], 4, coefs[1]+coefs[3]+coefs[4], lwd=3, col=cols[4])
arrows(4, coefs[1]+coefs[3]+coefs[4], 4, coefs[1]+coefs[3]+coefs[4]+coefs[6], lwd=3, col=cols[6])
arrows(5, coefs[1], 5, coefs[1]+coefs[2], lwd=3, col=cols[2]) # WNONP - WIN
segments(5, coefs[1]+coefs[2], 6,coefs[1]+coefs[2], col=cols[2]) #
arrows(6, coefs[1]+coefs[2], 6, coefs[1]+coefs[2]+coefs[4], lwd=3, col=cols[4])
arrows(6, coefs[1]+coefs[2]+coefs[4], 6, coefs[1]+coefs[2]+coefs[4]+coefs[5], lwd=3, col=cols[5])
legend("bottom", names(coefs), fill=cols, cex = 0.75 ,bg="white")
nonp
intersect(a, nonp)
source("../../X/function.R")
b = intersect(a, nonp)
mmGK(b)
x = mmGK(b)
nonp
nonp$GO
x$GO
x$GO$BP$Term
x$GO$MF$Term
x$GO$CC$Term
x$GO$BP$Term
x$KEGG
intersect(intersect(nonp, non_poly_explicit), names(fit)[fit.e[, "fracNONP:genoM"] > 0])
x = intersect(intersect(nonp, non_poly_explicit), names(fit)[fit.e[, "fracNONP:genoM"] > 0])
x = mmGK(x)
x$GO$BP$Term
x$GO$BP[1:10, ]
x$GO$BP[1:10, 7:8]
xx = mmGK(nonp)
xx$GO$BP[1:10, 7:8]
xx$GO$BP[1:20, 7:8]
library(dplyr)
library(ggplot2)
library(pheatmap)
library(biomaRt)
library(snpStats)
library(stargazer)
rm(list = ls())
setwd("~/Dropbox/GitHub/Testis/")
source("../../X/function.R")
load("data/dataList.rdt")
for(obj in names(dataList)) assign(obj, dataList[[obj]])
head(nonp_up)
head(IN)
x = rownames(IN)[IN$log2fold > 0]
y = setdiff(rownames(nonp_up), x)
y
y
x = nonp_up[y, ]
head(x)
write.xlsx(x, file = "table_20151023.xlsx")
sort(x$p.value)
rank(x$p.value)
order(x$p.value)
x = x[order(x$p.value), ]
head(x)
tail(x)
write.xlsx(x, file = "table_20151023.xlsx")
ensembl <- useMart(biomart = "ensembl", dataset = "mmusculus_gene_ensembl")
biomart = getBM("chromosome", "external_gene_name", y, ensembl)
biomart = getBM("chromosome_name", "external_gene_name", y, ensembl)
biomart
y
biomart = getBM("chromosome_name", filter = "external_gene_name", query = y, ensembl)
biomart = getBM("chromosome_name", filter = "external_gene_name", value = y, ensembl)
biomart
biomart = getBM(c("external_gene_name", "chromosome_name"), filter = "external_gene_name", value = y, ensembl)
biomart
table(biomart)
head(biomart)
table(biomart$chromosome_name)
biomart[biomart$chromosome_name == "X", ]
plot(table(biomart$chromosome_name))
biomart = biomart[biomart$chromosome_name %in% c(1:19, "X"), ]
plot(table(biomart$chromosome_name))
plot(table(biomart$chromosome_name), ylab = "Gene Number")
pdf(file = "Pdf/chr(bayes).pdf", width = 8, height = 5)
plot(table(biomart$chromosome_name), ylab = "Gene Number")
dev.off()
pdf(file = "Pdf/chr(bayes).pdf", width = 7, height = 5)
plot(table(biomart$chromosome_name), ylab = "Gene Number")
dev.off()
library(xlsx)
library(dplyr)
library(contrast)
library(quantro)
library(Biobase)
library(biomaRt)
library(RColorBrewer)
rm(list = ls())
setwd("~/Dropbox/GitHub/Testis")
load("data/dataList.rdt")
for(obj in names(dataList)) assign(obj, dataList[[obj]])
gene <- tpm[biomart$ensembl_transcript_id, ]
gene <- apply(gene, 2, function(x) tapply(x, biomart$external_gene_name, sum))
dim(gene)
gene <- gene[! rowMax(gene) > 1e4, ]  # outlier
gene <- sweep(gene, 2, colSums(gene), "/") * 1e6
geneAll <- rownames(gene)
gene <- gene[rowMax(gene) > 20, ]
dim(gene)
grp1 <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM")
gene <- gene[, order(factor(gsub("[123]", "", colnames(gene)), levels = grp1))]
grp2 <- factor(gsub("[123]", "", colnames(gene)), levels = grp1)
(geno <- factor(gsub("[123].*", "", colnames(gene)), levels = c("W", "M")))
(frac <- factor(gsub(".*[123]", "", colnames(gene)), levels = c("IN", "PLM", "NONP")))
fit <- apply(log2(gene + 1), 1, function (x) lm(x ~ frac + geno + frac * geno))
fit.e = t(sapply(fit, function(x) summary(x)$coefficients[-1, "Estimate"]))
fit.p = t(sapply(fit, function(x) summary(x)$coefficients[-1, "Pr(>|t|)"]))
(nonp = names(fit)[fit.p[, "fracNONP:genoM"] < 0.05])
x = names(fit)[fit.e[, "fracNONP:genoM"] > 0]
x
nonp = intersect(nonp, x)
nonp
load("data/dataList.rdt")
for(obj in names(dataList)) assign(obj, dataList[[obj]])
nonp_up
head(IN)
x = rownames(IN)[IN$log2fold > 0]
id_bayes = intersect(rownames(nonp_up), x)
id_bayes = setdiff(rownames(nonp_up), x)
nonp
id_glm = nonp
venn(list(bayes = id_bayes, glm = id_glm))
library(gplots)
venn(list(bayes = id_bayes, glm = id_glm))
setdiff(id_bayes, id_glm)
head(fit.e)
head(fit.p)
all(rownames(fit.e) == rownaems(fit.p))
all(rownames(fit.e) == rownames(fit.p))
glm = cbind(fit.e, fit.p)
head(glm)
out = glm[id_glm, ]
head(out)
order(out$fracNONP:genoM)
order(out[, "fracNONP:genoM"])
out = out[order(out[, "fracNONP:genoM"]), ]
head(out)
head(out, n = 10)
head(out, n = 20)
out["Hspa2", ]
out = out[order(out[, 10]), ]
head(out)
head(out, n = 20)
intersect(id_bayes, id_glm)
"Hspa8" %in% rownames(nonp_up)
"Hspa8" %in% rownames(IN)
write.xlsx(out, file = "table_20151023.xlsx", sheetName = "GLM", append = T)
y = rownames(out)
y
biomart = getBM(c("external_gene_name", "chromosome_name"), filter = "external_gene_name", value = y, mart)
mart <- useMart("ensembl", dataset = "mmusculus_gene_ensembl")
biomart = getBM(c("external_gene_name", "chromosome_name"), filter = "external_gene_name", value = y, mart)
table(biomart$chromosome_name)
biomart[biomart$chromosome_name == "X", ]
pdf(file = "Pdf/chr(bayes).pdf", width = 7, height = 5)
plot(table(biomart$chromosome_name), ylab = "Gene Number")
dev.off()
biomart[biomart$chromosome_name == "X", ]
biomart[biomart$chromosome_name == "X", ]$external_gene_name
pdf(file = "Pdf/chr(bayes).pdf", width = 7, height = 5)
venn(list(bayes = id_bayes, glm = id_glm))
dev.off()
venn(list(bayes = id_bayes, glm = id_glm))
intersect(id_bayes, id_glm)
(in = names(fit)[fit.p[, "genoM"] < 0.05])
(ain = names(fit)[fit.p[, "genoM"] < 0.05])
y = id_bayes
y
biomart = getBM(c("external_gene_name", "chromosome_name"), filter = "external_gene_name", value = y, mart)
biomart[biomart$chromosome_name == "X", ]
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
