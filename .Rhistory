fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .9, lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5, lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"),
label.col = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"),
col = "transparent", alpha = .5, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"),
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2,
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2,
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.pos = 0,
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 1, cat.pos = 0,
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5,
cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.pos = 0,
cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5,
cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.fontface = "bold", cat.pos = 0,
cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5,
cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.fontface = "bold",
cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
x = "DE4m"
DE.month$x
DE.month$"x"
DE.month$DE4m
DE.month[[x]]
for (month in c("DE4m", "DE5m", "DE6m"))
write.table(rownames(DE.month[[month]]), row.names = FALSE, col.names = FALSE, quote = FALSE,
file = paste(paste("~/Dropbox/AD/DAVID", month, sep = "."), "txt", sep = "."))
for (month in c("DE4m", "DE5m", "DE6m"))
write.table(rownames(DE.month[[month]]), row.names = FALSE, col.names = FALSE, quote = FALSE,
file = paste(paste("~/Dropbox/AD/DAVID", month, sep = "/"), "txt", sep = "."))
rm(list = ls())
library(maSigPro)
load("~/Dropbox/AD/R/batch2014.rdt")
str(dt)
colnames(dt)
data(edesign.abiotic)
edesign.abiotic
treat <- rep("WT", ncol(dt))
treat[grep("APP", colnames(dt))] <- "APP"
month <- rep("4m", ncol(dt))
month[grep("5m", colnames(dt))] <- "5m"
month[grep("6m", colnames(dt))] <- "6m"
treat
month
colnames(dt)
paste(treat, month, sep = "")
uid <- paste(treat, month, sep = "")
uid
as.numeric(uid)
as.integer(uid)
as.factor(uid)
nlevels(as.factor(uid))
month <- rep("2m", ncol(dt))
month[grep("4m", colnames(dt))] <- "5m"
month[grep("5m", colnames(dt))] <- "5m"
month[grep("6m", colnames(dt))] <- "6m"
uid <- paste(treat, month, sep = "")
nlevels(as.factor(uid))
levels(as.factor(uid))
as.numeric(as.factor(uid))
edesign.abiotic
design <- cbind(Time = gsub("m", ",", month),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
design <- cbind(Time = gsub("m", "", month),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
design <- cbind(Time = as.numeric(gsub("m", "", month)),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
rownames(design) <- colnames(dt)
design
data(data.abiotic)
edesign <- cbind(Time = as.numeric(gsub("m", "", month)),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
rownames(edesign) <- colnames(dt)
design <- make.design.matrix(edesign, degree = 3)
design
?p.vector
fit <- p.vector(dt, design, Q = 0.05, MT.adjust = "BH")
fit$I
fit$i
fit$alfa
fit$alfa
fit$SELEC
str(fit)
?T.step
?T.fit
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05)
str(tstep)
tstep$coefficients
sigs <- get.siggenes(tstep, rsq = 0.6, vars = "groups")
str(sigs)
suma2Venn(sigs$summary[, 2:4])
sigs$summary
suma2Venn(sigs$summary[, 1:2])
str(sigs)
sigs <- get.siggenes(tstep, rsq = 0.6, vars = "each")
sigs$summary
stop("x")
setwd()
0.01 * 584
n <- 100
object.size(n)
object.size(n, units = "auto")
?object.size
format(object.size(n), units = "auto")
format(object.size(n), units = "Gb")
?grep
?read.delim
load("~/Dropbox/ADSP/R/hg19Gene.rdt")
head(hg19Gene)
library(pheatmap)
library(ggplot2)
library(matrixcalc)
rm(list = ls())
load("~/Dropbox/ADSP/R/kinship.rdt")
KS <- kinship$autosome
is.positive.definite(KS)
KS[KS < 0] <- 0
is.positive.definite(KS)
KS <- kinship$autosome
KS[KS < 0] <- 0
is.positive.definite(KS)
KS[1:10, 1:10]
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
kin23 <- kinship$kin23
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
pdf("~/Dropbox/ADSP/kinship/kin-heatmap.pdf")
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
for (i in 1:22) {
KS <- kinship$chr[[i]]
KS[KS < 0] <- 0
judge <- is.positive.definite(KS)
cat(judge, "\n")
}
load("~/Dropbox/ADSP/R/KS_doqtl.rdt")
load("~/Dropbox/ADSP/R/KS_emma.rdt")
compare <- cbind(EMMA = c(kin1), DOQTL = c(kin2), KING = c(kinship$autosome))
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 4, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 4, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 3, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 20)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
?pheatmap
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 2, cellheight = 2, fontsize_number = 6)
# heatmap(cor(kinship23))
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 10, cellheight = 10, fontsize_number = 6)
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 10, cellheight = 10, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 20, cellheight = 20, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 30, cellheight = 30, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pedigree = c(rep("within", 1545), rep("between", 164055))
kin.dt <- data.frame(kinship = c(kin23),
chr = rep(colnames(kin23), each = nrow(kin23)),
pedigree = rep(pedigree, 23))
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf", width = 5)
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(fill = pedigree, alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(aes(fill = pedigree), alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("grey30", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12))
#       legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(color = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank())
dev.off()
library(WGCNA)
install.packages("WGCNA")
library(WGCNA)
install.packages("namespace")
library(WGCNA)
install.packages("impute")
library(WGCNA)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("Biobase", lib.loc="~/Library/R/3.1/library")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach",
title: "myfile"
?seq
library(biomaRt)
library(dplyr)
library(ggvis)
load("data/ge_tpm.rdt")
setwd("~/Dropbox/GitHub/Testis/")
load("data/ge_tpm.rdt")
slp1 <- colnames(ge_tpm)
grp1 <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM")
spInf <- data.frame(sample = slp1, grp = factor(gsub("[123]", "", slp1), levels = grp1))
spInf <- mutate(spInf, geno = factor(gsub("^(M|W).*", "\\1", grp), levels = c("W", "M")))
ggvis1 <- function(x) {
spInf %>% mutate(tpm = c(as.matrix(ge_tpm[x, ]))) %>%
ggvis(~as.numeric(grp), ~tpm) %>% layer_boxplots(fill=~grp, width = 0.5) %>% layer_text(text:=~sample)
}
ggvis1("Hspa2")
poly <- within(ge_tpm, {
RW1 = W1PLM/W1NONP; RW2 = W2PLM/W2NONP; RW3 = W3PLM/W3NONP; RM1 = M1PLM/M1NONP; RM2 = M2PLM/M2NONP; RM3 = M3PLM/M3NONP
}) %>% select(contains("R"))
norm <- within(ge_tpm, {
PI_W1 = W1PLM/W1IN; PI_W2 = W2PLM/W2IN; PI_W3 = W3PLM/W3IN; PI_M1 = M1PLM/M1IN; PI_M2 = M2PLM/M2IN; PI_M3 = M3PLM/M3IN;
NI_W1 = W1NONP/W1IN; NI_W2 = W2NONP/W2IN; NI_W3 = W3NONP/W3IN; NI_M1 = M1NONP/M1IN; NI_M2 = M2NONP/M2IN; NI_M3 = M3NONP/M3IN;
PN_W1 = W1PLM/W1NONP; PN_W2 = W2PLM/W2NONP; PN_W3 = W3PLM/W3NONP; PN_M1 = M1PLM/M1NONP; PN_M2 = M2PLM/M2NONP; PN_M3 = M3PLM/M3NONP
}) %>% select(contains("_"))
head(norm)
head(ge_tpm)
hist(ge_tpm[grep("W[123]PLM")])
hist(ge_tpm[grep("W[123]PLM", colnames(ge_tpm))])
grep("W[123]PLM", colnames(ge_tpm))
hist(ge_tpm[, grep("W[123]PLM", colnames(ge_tpm))])
x = ge_tpm[grep("W[123]PLM", colnames(ge_tpm))]
str(x)
hist(c(x))
hist(x)
hist(as.matrix(x))
hist(log2(ge_tpm[grep("W[123]PLM", colnames(ge_tpm))] + 1)
)
hist(log2(as.matrix(ge_tpm[grep("W[123]PLM", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge_tpm[grep("M[123]PLM", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge_tpm[grep("W[123]PLM", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge_tpm[grep("M[123]PLM", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge_tpm[grep("W[123]NONP", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge_tpm[grep("M[123]NONP", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge_tpm[grep("W[123]PLM", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge_tpm[grep("M[123]PLM", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge_tpm[grep("W[123]NONP", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge_tpm[grep("M[123]NONP", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge_tpm[grep("W[123]IN", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge_tpm[grep("M[123]IN", colnames(ge_tpm))]) + 1))
head(ge_tpm)
ge2 = ge_tpm[apply(ge_tpm, 1, function(x) min(x) > 5), ]
hist(log2(as.matrix(ge2[grep("W[123]IN", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge2[grep("M[123]IN", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge2[grep("W[123]PLM", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge2[grep("M[123]PLM", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge2[grep("W[123]NONP", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge2[grep("M[123]NONP", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge2[grep("W[123]PLM", colnames(ge_tpm))]) + 1))
hist(log2(as.matrix(ge2[grep("M[123]PLM", colnames(ge_tpm))]) + 1))
slp1 <- colnames(ge_tpm)
grp1 <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM")
spInf <- data.frame(sample = slp1, grp = factor(gsub("[123]", "", slp1), levels = grp1))
spInf <- mutate(spInf, geno = factor(gsub("^(M|W).*", "\\1", grp), levels = c("W", "M")))
hist(as.matrix(ge2[grep("W[123]IN", slp1)]) + 1)
hist(as.matrix(ge2[grep("M[123]IN", slp1)]) + 1)
par(mfrow = c(2, 1))
hist(log2(as.matrix(ge2[grep("W[123]IN", slp1)]) + 1))
hist(log2(as.matrix(ge2[grep("M[123]IN", slp1)]) + 1))
hist(log2(as.matrix(ge2[grep("W[123]PLM", slp1)]) + 1))
hist(log2(as.matrix(ge2[grep("M[123]PLM", slp1)]) + 1))
ggvis1("Hspa2")
norm1 <- within(ge_tpm, {
RW1 = W1PLM/W1NONP; RW2 = W2PLM/W2NONP; RW3 = W3PLM/W3NONP; RM1 = M1PLM/M1NONP; RM2 = M2PLM/M2NONP; RM3 = M3PLM/M3NONP
}) %>% select(contains("R"))
norm2 <- within(ge_tpm, {
RW1 = W1PLM/W1IN; RW2 = W2PLM/W2IN; RW3 = W3PLM/W3IN; RM1 = M1PLM/M1IN; RM2 = M2PLM/M2IN; RM3 = M3PLM/M3IN
}) %>% select(contains("R"))
build = norm2
Hspa2_rt <- data.frame(sample = colnames(build)) %>% mutate(grp = factor(gsub(".*(M|W).*", "\\1", sample)))
Hspa2_rt <- Hspa2_rt %>% mutate(ratio = c(as.matrix(build["Hspa2", ])))  # Hspa2 in poly/non-poly
ggvis(Hspa2_rt, ~as.numeric(grp), ~ratio) %>% layer_boxplots(fill=~grp, width = 0.5) %>% layer_text(text:=~sample)
build = norm1
Hspa2_rt <- data.frame(sample = colnames(build)) %>% mutate(grp = factor(gsub(".*(M|W).*", "\\1", sample)))
Hspa2_rt <- Hspa2_rt %>% mutate(ratio = c(as.matrix(build["Hspa2", ])))  # Hspa2 in poly/non-poly
ggvis(Hspa2_rt, ~as.numeric(grp), ~ratio) %>% layer_boxplots(fill=~grp, width = 0.5) %>% layer_text(text:=~sample)
head(norm1)
grp
grp = factor(gsub(".*(M|W).*", "\\1", sample), levels = c("W", "M"))
slp2 <- colnames(norm1)
grp2 = factor(gsub(".*(M|W).*", "\\1", slp2), levels = c("W", "M"))
grp2
hist(norm1[, 1])
head(ge_tpm)
ge1 <- ge_tpm[apply(ge_tpm[grep("W[123]IN", slp1)], 1, function(x) min(x) > 5), ]
ge1 <- ge_tpm[apply(ge_tpm[grep("W[123]IN", slp1)], 1, function(x) max(x) > 10), ]
ge1 <- ge_tpm[apply(ge_tpm[grep("W[123]IN", slp1)], 1, function(x) max(x) > 20), ]
slp1
tpm <- ge_tpm[apply(ge_tpm[grep("W[123]IN", slp1)], 1, function(x) max(x) > 20), ]
norm1 <- within(tpm, {
RW1 = W1PLM/W1NONP; RW2 = W2PLM/W2NONP; RW3 = W3PLM/W3NONP; RM1 = M1PLM/M1NONP; RM2 = M2PLM/M2NONP; RM3 = M3PLM/M3NONP
}) %>% select(contains("R"))
build = norm1
Hspa2_rt <- data.frame(sample = colnames(build)) %>% mutate(grp = factor(gsub(".*(M|W).*", "\\1", sample)))
Hspa2_rt <- Hspa2_rt %>% mutate(ratio = c(as.matrix(build["Hspa2", ])))  # Hspa2 in poly/non-poly
ggvis(Hspa2_rt, ~as.numeric(grp), ~ratio) %>% layer_boxplots(fill=~grp, width = 0.5) %>% layer_text(text:=~sample)
norm2 <- within(tpm, {
RW1 = W1PLM/W1IN; RW2 = W2PLM/W2IN; RW3 = W3PLM/W3IN; RM1 = M1PLM/M1IN; RM2 = M2PLM/M2IN; RM3 = M3PLM/M3IN
}) %>% select(contains("R"))
slp2 <- colnames(norm1)
grp2 = factor(gsub(".*(M|W).*", "\\1", slp2), levels = c("W", "M"))
head(norm1)
apply(norm1, 1, function(x) lm(x ~ grp2))
fit <- apply(log2(norm1 + 1), 1, function(x) lm(x ~ grp2))
str(norm1)
log2(norm1 + 1)
Hspa2 <- data.frame(sample = slp2, grp = grp2)
Hspa2 <- data.frame(sample = slp2, grp = grp2) %>% mutate(value = c(as.matrix(norm1["Hspa2", ])))
ggvis(Hspa2, ~as.numeric(grp), ~value) %>% layer_boxplots(fill=~grp, width = 0.5) %>% layer_text(text:=~sample)
data.frame(sample = slp2, grp = grp2) %>% mutate(value = c(as.matrix(norm1["Hspa2", ]))) %>%
ggvis(~as.numeric(grp), ~value) %>% layer_boxplots(fill=~grp, width = 0.5) %>% layer_text(text:=~sample)
Hspa2 <- data.frame(sample = slp2, grp = grp2) %>% mutate(value = c(as.matrix(norm1["Hspa2", ])))
summary(lm(value ~ log2(grp + 1), Hspa2))
summary(lm(log2(value + 1) ~ grp, Hspa2))
norm1[, 1]
?is.Inf
norm1[apply(norm1, 1, function(x) any(is.infinite(x)), ]
norm1[apply(norm1, 1, function(x) any(is.infinite(x))), ]
x = norm1[apply(norm1, 1, function(x) any(is.infinite(x))), ]
tpm[rownames(x), ]
ggvis1("Gm10052")
ggvis1("Gm13237")
tpm <- ge_tpm[apply(ge_tpm[grep("W[123]IN", slp1)], 1, function(x) max(x) > 50), ]
tpm <- ge_tpm[apply(ge_tpm[grep("W[123]IN", slp1)], 1, function(x) max(x) > 20), ]
norm1 <- within(tpm + 1, {
RW1 = W1PLM/W1NONP; RW2 = W2PLM/W2NONP; RW3 = W3PLM/W3NONP; RM1 = M1PLM/M1NONP; RM2 = M2PLM/M2NONP; RM3 = M3PLM/M3NONP
}) %>% select(contains("R"))
head(nrom1)
head(norm1)
norm2 <- within(tpm + 1, {
RW1 = W1PLM/W1IN; RW2 = W2PLM/W2IN; RW3 = W3PLM/W3IN; RM1 = M1PLM/M1IN; RM2 = M2PLM/M2IN; RM3 = M3PLM/M3IN
}) %>% select(contains("R"))
slp2 <- colnames(norm1)
grp2 = factor(gsub(".*(M|W).*", "\\1", slp2), levels = c("W", "M"))
norm1[apply(norm1, 1, function(x) any(is.infinite(x))), ]
fit <- apply(log2(norm1 + 1), 1, function(x) lm(x ~ grp2))
head(names(fit))
fit.r2 <- sapply(fit, function (x) summary(x)$r.squared)
fit.fs <- sapply(fit, function (x) summary(x)$fstatistic)
fit.pv <- apply(fit.fs, 2, function (x) pf(x[1], x[2], x[3], lower.tail = F))
fit.qv <- p.adjust(fit.pv, method = "fdr")
sig_fit <- fit[fit.qv < 0.05 & fit.r2 > 0.3]
sig_fit <- fit[fit.pv < 0.05 & fit.r2 > 0.3]
sig_fit
table(fit.pv < 0.05)
sig_fit <- fit[fit.pv < 0.05 & fit.r2 > 0.4]
sig_fit <- fit[fit.pv < 0.05 & fit.r2 > 0.5]
sig_fit <- fit[fit.pv < 0.05 & fit.r2 > 0.6]
sig_fit <- fit[fit.pv < 0.05 & fit.r2 > 0.7]
sig_fit <- fit[fit.pv < 0.05 & fit.r2 > 0.6]
names(sig_fit)
source("../X/function.R")
summary(fit[[1]])
summary(fit[[1]])$coefficients
summary(sig_fit[[1]])$coefficients
fit.et <- sapply(fit, function (x) summary(x)$coefficients["grp2M", "Estiamte"])
fit.et <- sapply(fit, function (x) summary(x)$coefficients[2, "Estiamte"])
summary(sig_fit[[1]])$coefficients["grp2M", "Estiamte"]
summary(sig_fit[[1]])$coefficients[2, 1]
fit.et <- sapply(fit, function (x) summary(x)$coefficients[2, 1])
head(fit.et)
sig_up <- fit[fit.pv < 0.05 & fit.et > 0]
sig_dn <- fit[fit.pv < 0.05 & fit.et < 0]
names(sig_dn)
names(sig_up)
up_gk <- myGK(names(sig_up))
up_gk
load("../X/summary.rdt")
table %>% filter(query %in% names(sig_up))
dn_gk <- myGK(names(sig_dn))
dn_gk
head(tpm)
tpm <- ge_tpm[apply(ge_tpm[grep("W[123]IN", slp1)], 1, function(x) max(x) > 10), ]
norm1 <- within(tpm + 1, {
RW1 = W1PLM/W1NONP; RW2 = W2PLM/W2NONP; RW3 = W3PLM/W3NONP; RM1 = M1PLM/M1NONP; RM2 = M2PLM/M2NONP; RM3 = M3PLM/M3NONP
}) %>% select(contains("R"))
