axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(aes(fill = pedigree), alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("grey30", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12))
#       legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(color = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank())
dev.off()
library(WGCNA)
install.packages("WGCNA")
library(WGCNA)
install.packages("namespace")
library(WGCNA)
install.packages("impute")
library(WGCNA)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("Biobase", lib.loc="~/Library/R/3.1/library")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach",
title: "myfile"
?seq
132 + 95 + 276 + 113
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
log10(0.05)
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
library(QTLRel)
?scanOe
?scanOne
library(tissuesGeneExpression)
data("tissuesGeneExpression")
library(genefilter)
y = e[,which(tissue=="endometrium")]
head(y)
var = apply(y, 1, var)
qqnorm(var)
lines(1, 1)
abline(0, 1)
qqnorm(sqrt(var))
library(limma)
?fitFDist
fitFDist(apply(y, 1, var), 14)
ps <- (seq(along=s2)-0.5)/length(s2)
s2 <- rowVars(y)
ps <- (seq(along=s2)-0.5)/length(s2)
ps
summary(ps)
estiamte=fitFDist(apply(y, 1, var), 14)
estimate$scale
x=fitFDist(apply(y, 1, var), 14)
x$scale
?qf
estimates = x
ps <- (seq(along=s2)-0.5)/length(s2)
theoretical<- qf(ps,14,estimates$df2)*estimates$scale
theoretical
hist(theoretical)
summary(ps)
seq(along = 5)
seq(along = 1:5)
qqplot(sqrt( theoretical ), sqrt( s2 ),ylim=LIM,xlim=LIM)
qqplot(sqrt( theoretical ), sqrt( s2 ))
?fitFDist
0.45 * 0.55
0.45 * 0.55 / 20
0.45 * 0.55 * 20
sqrt(0.45 * 0.55 * 20)
sqrt(0.45 * 0.55 * 20) / 20
library(Biobase)
library(SpikeInSubset)
data(rma95)
y <- exprs(rma95)
pData(rma95)
g <- factor(rep(0:1,each=3))
spike <- rownames(y) %in% colnames(pData(rma95))
spike
library(genefilter)
x = rowttests(y, g)
?rowttests
str(x)
head(x)
sig = x$p.value < 0.01
table(sig)
1 - sum(spike & sig ) / sum(sig)
head(y)
?rowVar
rowvar
?rowVars
sds = rowSds(y[, 1:3])
sds
spike
sig
group = spike
group[sig] = true_pos
x = rep("T_POS", length(spike))
x
x[(! sig) & spike] = "F_NEG"
x[(! sig) & (! spike)] = "T_NEG"
x[(sig) & (! spike)] = "F_POS"
x
boxplot(x)
?boxplot
table(x)
boxplot(sds, x)
boxplot(sds ~ x)
boxplot(split(sds, x))
library(limma)
fit <- lmFit(y, design=model.matrix(~ g))
colnames(coef(fit))
fit[[1]]
length(fit)
coef(fit)
head(coef(fit))
sampleSD = fit$sigma
posteriorSD = sqrt(fit$s2.post)
sampleSD = fit$sigma
posteriorSD = sqrt(fit$s2.post)
fit <- eBayes(fit)
posteriorSD = sqrt(fit$s2.post)
plot(sampleSD, posteriorSD)
abline(0, 1)
mean(sampleSD)
pvals = fit$p.value[,2]
length(pvals)
length(spike)
1 - sum(pvals < 0.01 & spike) / sum(spike)
sum(pvals < 0.01 & spike) / sum(pvals < 0.01)
library(limma)
fit = lmFit(y, design=model.matrix(~ g))
fit = eBayes(fit)
##second coefficient relates to diffences between group
pvals = fit$p.value[,2]
1 - sum(pvals < 0.01 & spike) / sum(spike)
pvals
pvals < 0.01
table(pvals < 0.01)
names(fit)
head(fit$p.value)
pvals = fit$p.value[, 2]
table(pvals < 0.01)
table(spikes)
table(spike)
rowttest(y)
rowttests(y)
y = rowttests(y)
head(y)
table(y[, 3] < 0.01)
y = rowttests(y, g)
g
y <- exprs(rma95)
z = rowttests(y, g)
table(z[, 3] < 0.01)
pvals
all(rownames(pvals) == names(spike))
sum((! pvals < 0.01) & spike)/ sum(pvals < 0.01)
sum((pvals < 0.01) & (! spike))/ sum(pvals < 0.01)
5.3 * 52
?pt
?qr
head(y)
y1 = y[1, ]
y1
g
lm(y1 ~ g)
summary(lm(y1 ~ g))
g
-0.0744 / 0.10605
?mrlm
?rlm
library(MASS)
?rlm
head(y)
rowVars(y)
vars = rowVars(y)
hist(vars)
hist(sqrt(vars))
?seq
seq(0, 1, by = 0.01)
p = seq(0, 1, by = 0.01)
6 * p * (1 - p)
sum(6 * p * (1 - p))
pi = 6 * p * (1 - p)
plot(p, pi)
mean(pi)
head(y)
dim(y)
x = rowVars(y[, 1:3])
x
n = length(x)
n
?pmax
pmax(x)
min(5:1)
pmin(5:1)
pmin(5:1, pi)
pmax(x, 0)
k = rnorm(10)
k
pmax(k, 0)
log(x)
digamma(11/2)
?digamma
log(11/2)
z <- log(x)
e <- z-digamma(df1/2)+log(df1/2)
df1 = 11
e <- z-digamma(df1/2)+log(df1/2)
emean <- mean(e)
evar <- sum((e-emean)^2)/(n-1)
evar <- evar - mean(trigamma(df1/2))
evar
df2 <- 2*trigammaInverse(evar)
s20 <- exp(emean+digamma(df2/2)-log(df2/2))
df2
s20
fitFDist(x, 11)
?sampling
library(rstan)
?sampling
log10
install.packages("ExomeDepth")
library(ExomeDepth)
data(exons.hg19)
head(exons.hg19)
data(ExomeCount)
ExomeCount
colnames(ExomeCount)
ExomeCount.dafr <- as(ExomeCount[, colnames(ExomeCount)], "data.frame")
head(ExomeCount.dafr)
ExomeCount.dafr$chromosome <- gsub(as.character(ExomeCount.dafr$space), "chr", "")
ExomeCount.dafr$chromosome <- gsub(as.character(ExomeCount.dafr$space), pattern = "chr", replacement = "")
head(ExomeCount.dafr)
99e-2
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(GenomicFeatures)
library(org.Hs.eg.db)
library(tidyr)
library(reshape)
library(dplyr)
?pb
?pbin
?pbinomial
?pbinom
pbinom(q = 10, n = 100, prob = 0.3)
pbinom(q = 10, size = 100, prob = 0.3)
pbinom(q = 30, size = 100, prob = 0.3)
hist(1e3, 1e3, 0.3)
hist(rbinom(1e3, 1e3, 0.3))
dbinom(x = 1:30, size = 100, prob = 0.3)
pbinom(q = 30, size = 100, prob = 0.3)
sum(dbinom(x = 1:30, size = 100, prob = 0.3))
plot(1:30, dbinom(x = 1:30, size = 100, prob = 0.3))
plot(1:100, dbinom(x = 1:30, size = 100, prob = 0.3))
plot(1:100, dbinom(x = 1:100, size = 100, prob = 0.3))
plot(1:100, dbinom(x = 1:100, size = 100, prob = 0.3), type = "b")
combinations(10, 2)
install.packages("combinat")
require(combinat)
permn(3)
combn(3, 2)
library(combinat)
library(gtools)
combinations(10, 2)
10 * 9 / 2
permutations(10, 2)
permutations(100, 30)
dbinom(2, 10, prob = 0.3)
permutations(10, 2) * 0.3^2 * 0.7^8
dbinom(2, 10, prob = 0.3)
nrow(permutations(10, 2)) * 0.3^2 * 0.7^8
?dbinom
nrow(combinations(10, 2)) * 0.3^2 * 0.7^8
?bbeta
?dbeta
plot(1:100, dbeta(x = 1:100, shape1 = 1, shape2 = 1), type = "b")
plot(-5:5, dbeta(x = -5:5, shape1 = 1, shape2 = 1), type = "b")
seq = seq(1, 2, 100)
seq
seq = seq(100, -1, 2)
seq = seq(-1, 2, by = 1e-2)
plot(seq, dbeta(x = seq, shape1 = 1, shape2 = 1), type = "b")
seq = seq(0, 1, by = 1e-2)
plot(seq, dbeta(x = seq, shape1 = 1, shape2 = 1), type = "b")
plot(seq, dbeta(x = seq, shape1 = 1, shape2 = 2), type = "b")
plot(seq, dbeta(x = seq, shape1 = 5, shape2 = 1), type = "b")
plot(seq, dbeta(x = seq, shape1 = 10, shape2 = 2), type = "b")
rm(list = ls())
setwd("~/Dropbox/GitHub/Adsp")
load("data/glmList.rdt"); list <- glmList
for(obj in names(list)) assign(obj, list[[obj]])
gwas.lod <- filter(gwas, LOD > 15) # permutation cut
gwas.lod <- filter(gwas, LOD > 15) # permutation cut
load("data/glmList.rdt"); list <- glmList
for(obj in names(list)) assign(obj, list[[obj]])
gwas.lod <- filter(gwas, LOD > 15) # permutation cut
head(gwas)
library(dplyr)
gwas.lod <- filter(gwas, LOD > 15) # permutation cut
vep.lod <- filter(vep, UID %in% gwas.lod$UID)
gwas_vep_lod <- cbind(vep.lod, gwas.lod[match(vep.lod$UID, gwas.lod$UID), ])
nrow(gwas_vep_lod)
head(gwas_vep_lod)
unique(gwas_vep_lod$Symbol)
log2(0.25)
library(contrast)
library(xlsx)
library(dplyr)
library(contrast)
library(quantro)
library(Biobase)
library(biomaRt)
library(RColorBrewer)
rm(list = ls())
setwd("~/Dropbox/GitHub/Testis")
load("data/dataList.rdt")
for(obj in names(dataList)) assign(obj, dataList[[obj]])
myhyper <- function(g1, g2) {  # Hypergeometric
if(length(intersect(g1, g2)) == 0) return(1)
1 - phyper(length(intersect(g1, g2)) - 1, length(g2), length(setdiff(geneAll, g2)), length(g1))
} # Pr(count >= length(intersect(g1, g2)))
gene <- tpm[biomart$ensembl_transcript_id, ]
gene <- apply(gene, 2, function(x) tapply(x, biomart$external_gene_name, sum))
gene[rowMax(gene) > 1e4, ] %>% rownames  # outlier
gene <- gene[! rowMax(gene) > 1e4, ]  # outlier
gene <- sweep(gene, 2, colSums(gene), "/") * 1e6
geneAll <- rownames(gene)
gene <- gene[rowMax(gene) > 20, ]
(grp1 <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM"))
gene <- gene[, order(factor(gsub("[123]", "", colnames(gene)), levels = grp1))]
(grp2 <- factor(gsub("[123]", "", colnames(gene)), levels = grp1))
geno <- factor(gsub("[123].*", "", colnames(gene)), levels = c("W", "M"))
frac <- factor(gsub(".*[123]", "", colnames(gene)), levels = c("IN", "PLM", "NONP"))
fit <- apply(log2(gene + 1), 1, function (x) lm(x ~ frac + geno + frac * geno))
(hspa2 = log2(gene["Hspa2", ] + 1))
(hspa2 = sapply(grp1, function(x) mean(hspa2[grp2 == x])))
(coefs = summary(fit[["Hspa2"]])$coefficients[, "Estimate"])
hspa2["MPLM"] + hspa2["WIN"] - hspa2["WPLM"] - hspa2["MIN"]
coefs
coefs["fracPLM:genoM"]
sapply(fit, function(x) contrast(x, list(frac = "PLM", geno = "M"), list (frac = "PLM", geno = "W")))
coefs["fracPLM:genoM"]
x = sapply(fit, function(x) contrast(x, list(frac = "PLM", geno = "M"), list (frac = "PLM", geno = "W")))
head(x)
str(x)
x[[1]]
fit[[1]]
x = fit[[1]]
contrast(x, list(frac = "PLM", geno = "M"), list(frac = "PLM", geno = "W"))
contrast(x, list(frac = "PLM", geno = "M"), list(frac = "PLM", geno = "W"))[c("Contrast", "Pvalue"), ]
contrast(x, list(frac = "PLM", geno = "M"), list(frac = "PLM", geno = "W"))[c("Contrast", "Pvalue")]
x = sapply(fit, function(x) contrast(x, list(frac = "PLM", geno = "M"), list(frac = "PLM", geno = "W"))[c("Contrast", "Pvalue")])
head(x)
dim(x)
x[, 1:4]
contrast = t(sapply(fit, function(x) contrast(x, list(frac = "PLM", geno = "M"), list(frac = "PLM", geno = "W"))[c("Contrast", "Pvalue")]))
(poly_explicit <- rownames(contrast)[contrast[, "Pvalue"] < 0.05])
fit.e = t(sapply(fit, function(x) summary(x)$coefficients[-1, "Estimate"]))
fit.p = t(sapply(fit, function(x) summary(x)$coefficients[-1, "Pr(>|t|)"]))
(nonp = names(fit)[fit.p[, "fracNONP:genoM"] < 0.05])
poly = names(fit)[fit.p[, "fracPLM:genoM"] < 0.05]
(poly = names(fit)[fit.p[, "fracPLM:genoM"] < 0.05])
intersect(poly, poly_explicit)
contrast = t(sapply(fit, function(x) contrast(x, list(frac = "NONP", geno = "M"), list(frac = "NONP", geno = "W"))[c("Contrast", "Pvalue")]))
(non_poly_explicit <- rownames(contrast)[contrast[, "Pvalue"] < 0.05])
intersect(nonp, non_poly_explicit)
intersect(intersect(nonp, non_poly_explicit), names(fit)[fit.e[, "fracNONP:genoM"] > 0])
(hspa2 = log2(gene["Hspa2", ] + 1))
(hspa2 = sapply(grp1, function(x) mean(hspa2[grp2 == x])))
(coefs = summary(fit[["Hspa2"]])$coefficients[, "Estimate"])
cols <- brewer.pal(6,"Dark2")
plot(1:6, hspa2, xaxt="n", pch=17, cex=2, xlim=c(0, 7), ylim=c(-1, 12), xlab="")
axis(1, at=1:6, labels=names(hspa2))
abline(h=0)
arrows(1, 0, 1, coefs[1], lwd=3, col=cols[1]) # WIN as baseline
abline(h=coefs[1], col=cols[1])
arrows(2, coefs[1], 2, coefs[1]+coefs[4], lwd=3, col=cols[4]) # MIN - WIN
arrows(3, coefs[1], 3, coefs[1]+coefs[3], lwd=3, col=cols[3]) # WNONP - WIN
segments(3, coefs[1]+coefs[3], 4,coefs[1]+coefs[3], col=cols[3]) #
arrows(4, coefs[1]+coefs[3], 4, coefs[1]+coefs[3]+coefs[4], lwd=3, col=cols[4])
arrows(4, coefs[1]+coefs[3]+coefs[4], 4, coefs[1]+coefs[3]+coefs[4]+coefs[6], lwd=3, col=cols[6])
arrows(5, coefs[1], 5, coefs[1]+coefs[2], lwd=3, col=cols[2]) # WNONP - WIN
segments(5, coefs[1]+coefs[2], 6,coefs[1]+coefs[2], col=cols[2]) #
arrows(6, coefs[1]+coefs[2], 6, coefs[1]+coefs[2]+coefs[4], lwd=3, col=cols[4])
arrows(6, coefs[1]+coefs[2]+coefs[4], 6, coefs[1]+coefs[2]+coefs[4]+coefs[5], lwd=3, col=cols[5])
legend("bottomright", names(coefs), fill=cols, cex = 0.75 ,bg="white")
contrast = t(sapply(fit, function(x) contrast(x, list(frac = "NONP", geno = "M"), list(frac = "NONP", geno = "W"))[c("Contrast", "Pvalue")]))
head(contrast)
table(contrast[, "Pvalue"] < 0.05)
head(contrast, n = 20)
contrast[, contrast[, "Pvalue"] < 0.05, ]
contrast[contrast[, "Pvalue"] < 0.05, ]
x = contrast[contrast[, "Pvalue"] < 0.05, ]
head(x)
table(x$Contrast > 0)
table(x[, Contrast] > 0)
table(x[, "Contrast"] > 0)
table(x[, "Contrast"] > 0.1)
table(x[, "Contrast"] > 0.2)
table(x[, "Contrast"] > 0.5)
2^0.5
x["Hspa2", ]
x["Hspa8", ]
fit[["Hspa8"]]
?dbeta
seq = seq(0, 1, by = 1e-2)
plot(seq, dbeta(x = seq, shape1 = 5, shape2 = 1), type = "b")
plot(seq, dbeta(x = seq, shape1 = 10, shape2 = 2), type = "b")
plot(seq, dbeta(x = seq, shape1 = 438, shape2 = 544), type = "b")
?dnorm
plot(seq, dnorm(x = seq, mean = 0.446, shape2 = 0.016), type = "b")
plot(seq, dnorm(x = seq, mean = 0.446, sd = 0.016), type = "b")
head(gene)
nrow(gene)
nonp = gene[grep("NONP", names(gene))]
head(nonp)
names(gene)
head(gene)
gene = as.data.frame(gene)
nonp = gene[grep("NONP", names(gene))]
head(nonp)
?rowttest
??rowttest
library(genefilter)
y = rowttests(nonp, group = c("W", "W", "W", "M", "M", "M"))
?rowttests
y = rowttests(nonp, fac = c("W", "W", "W", "M", "M", "M"))
y = rowttests(as.matrix(nonp), fac = c("W", "W", "W", "M", "M", "M"))
y = rowttests(as.matrix(nonp), fac = factor(c("W", "W", "W", "M", "M", "M")))
head(y)
table(y$p.value < 0.05)
summary(fit[["Hspa2"]])
